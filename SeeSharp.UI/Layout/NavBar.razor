@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<div class="row py-3 align-items-center">
    <div class="col-md-3">
        <a class="navbar-brand fs-3 fw-bold text-primary text-decoration-none" href="/">Gọng Kính SeeSharp</a>
    </div>
    <div class="col-md-5">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Tìm kiếm sản phẩm..." @bind="searchTerm" @bind:event="oninput" @onkeyup="HandleKeyPress">
            <button class="btn btn-primary" type="button" @onclick="Search">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>
    <div class="col-md-4">
        <div class="d-flex justify-content-end">
            <a href="/order-lookup" class="btn btn-outline-primary me-3 d-flex align-items-center">
                <i class="bi bi-box-seam me-2"></i>
                <span>Tra cứu đơn hàng</span>
            </a>
            <div class="dropdown me-3">
                <a href="#" class="text-dark text-decoration-none dropdown-toggle" data-bs-toggle="dropdown">
                    <i class="bi bi-person fs-4"></i>
                </a>
                <ul class="dropdown-menu">

                    <AuthorizeView>
                        <Authorized>
                            <li><button class="dropdown-item" @onclick="Logout">Đăng xuất</button></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="/userprofile">Tài khoản của tôi</a></li>
                            <li><a class="dropdown-item" href="/order-lookup">Tra cứu đơn hàng</a></li>
                        </Authorized>
                        <NotAuthorized>
                            <li><a class="dropdown-item" href="/login">Đăng nhập</a></li>
                            <li><a class="dropdown-item" href="/register">Đăng ký</a></li>
                            <li><hr class="dropdown-divider"></li>
                        </NotAuthorized>    
                    </AuthorizeView>
                </ul>
            </div>
            <div class="dropdown me-3">
                <a href="#" class="text-dark text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" @onclick="LoadWishlistItems">
                    <i class="bi bi-heart fs-4"></i>
                    @if (wishlistItems != null && wishlistItems.Any())
                    {
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @wishlistItems.Count()
                        </span>
                    }
                </a>
                <div class="dropdown-menu dropdown-menu-end" style="min-width: 300px;">
                    <h6 class="dropdown-header">Sản phẩm yêu thích</h6>
                    
                    @if (isLoadingWishlist)
                    {
                        <div class="dropdown-item text-center">
                            <div class="spinner-border spinner-border-sm text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (wishlistItems == null || !wishlistItems.Any())
                    {
                        <div class="dropdown-item text-center">
                            <p class="mb-0">Không có sản phẩm yêu thích</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var item in wishlistItems)
                        {
                            <div class="dropdown-item d-flex align-items-center">
                                <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "https://placehold.co/50" : item.ImageUrl)" class="me-2" alt="@item.ProductName" style="width:50px;height:50px;object-fit:cover;">
                                <div>
                                    <p class="mb-0">@item.ProductName</p>
                                    <small class="text-muted">@(item.Price.ToString("N0"))đ</small>
                                </div>
                            </div>
                        }
                    }
                    
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item text-center" href="/wishlist">Xem tất cả</a>
                </div>
            </div>
            <div class="dropdown">
                <a href="/cart" class="text-dark text-decoration-none">
                    <i class="bi bi-cart3 fs-4"></i>
                </a>
            </div>
        </div>
    </div>
</div>

@code
{
    private bool isLoggedIn;
    private string? accessToken;
    private string searchTerm = string.Empty;
    private List<WishlistItem>? wishlistItems;
    private bool isLoadingWishlist = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckLoginStatus();
    }

    private async Task CheckLoginStatus()
    {
        accessToken = await localStorage.GetItemAsync<string>("accessToken");
        isLoggedIn = !string.IsNullOrEmpty(accessToken);
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("accessToken");
        await localStorage.RemoveItemAsync("refreshToken");
        isLoggedIn = false;
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // Redirect
        NavigationManager.NavigateTo("/");
    }

    private void Search()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(searchTerm)}");
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Search();
        }
    }

    private async Task LoadWishlistItems()
    {
        try
        {
            isLoadingWishlist = true;
            
            // Set authorization header if user is logged in
            if (!string.IsNullOrEmpty(accessToken))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            }
            
            var response = await Http.GetFromJsonAsync<WishlistResponse>("https://localhost:7222/api/wishitems");
            wishlistItems = response?.Items.ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading wishlist: {ex.Message}");
            wishlistItems = new List<WishlistItem>();
        }
        finally
        {
            isLoadingWishlist = false;
            StateHasChanged();
        }
    }

    public class WishlistItem
    {
        public string WishItemId { get; set; } = string.Empty;
        public string ProductVariantId { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public string Status { get; set; } = string.Empty;
        public string CategoryName { get; set; } = string.Empty;
    }

    public class WishlistResponse
    {
        public List<WishlistItem> Items { get; set; } = new();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
    }
}
