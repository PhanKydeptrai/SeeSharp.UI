@page "/cart"
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Giỏ hàng - Kính Thời Trang</PageTitle>

<style>
    /* Toast Notification */
    .toast-container {
        z-index: 1080;
    }
    
    .toast {
        min-width: 300px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        animation: toast-in-right 0.3s ease-in-out;
    }
    
    @@keyframes toast-in-right {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    .toast-header {
        padding: 0.75rem 1rem;
    }
    
    .toast-body {
        padding: 1rem;
    }
    
    .toast .btn-close {
        background-color: transparent;
        opacity: 0.8;
    }
    
    .toast .btn-close:hover {
        opacity: 1;
    }
</style>

<!-- Toast Notification Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer">
    @foreach (var toast in toastNotifications)
    {
        <div class="toast show mb-2" role="alert" aria-live="assertive" aria-atomic="true" id="@toast.Id">
            <div class="toast-header @toast.HeaderClass">
                <i class="bi @toast.Icon me-2"></i>
                <strong class="me-auto">@toast.Title</strong>
                <small>@toast.Timestamp.ToString("HH:mm:ss")</small>
                <button type="button" class="btn-close" aria-label="Close" @onclick="() => RemoveToast(toast)"></button>
            </div>
            <div class="toast-body">
                @if (toast.IsHtml)
                {
                    @((MarkupString)toast.Message)
                }
                else
                {
                    @toast.Message
                }
            </div>
        </div>
    }
</div>

<div class="container mt-4">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
            <li class="breadcrumb-item active" aria-current="page">Giỏ hàng</li>
        </ol>
    </nav>

    <h2 class="mb-4">Giỏ hàng của bạn</h2>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Đang tải...</span>
            </div>
            <p class="mt-2">Đang tải dữ liệu giỏ hàng...</p>
        </div>
    }
    else if (order == null || order.OrderDetails.Count == 0)
    {
        <!-- Empty Cart -->
        <div class="text-center py-5">
            <i class="bi bi-cart-x" style="font-size: 4rem;"></i>
            <h3 class="mt-3">Giỏ hàng của bạn đang trống</h3>
            <p class="text-muted">Hãy thêm sản phẩm vào giỏ hàng để tiến hành mua sắm</p>
            <a href="/collections" class="btn btn-primary mt-3">
                Tiếp tục mua sắm
            </a>
        </div>
    }
    else
    {
        <div class="row">
            <!-- Cart Items -->
            <div class="col-lg-8">
                <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Sản phẩm (@order.OrderDetails.Count)</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var item in order.OrderDetails)
                        {
                            <div class="row cart-item mb-3 pb-3 border-bottom">
                                <div class="col-md-2">
                                    <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "https://placehold.co/150" : item.ImageUrl)" class="img-fluid rounded" alt="@item.ProductName">
                                </div>
                                <div class="col-md-10">
                                    <div class="d-flex justify-content-between">
                                        <h5><a href="/product/@item.ProductId" class="text-decoration-none">@item.ProductName</a></h5>
                                        <button class="btn btn-sm btn-link text-danger" @onclick="() => RemoveFromCart(item.OrderDetailId)">
                                            <i class="bi bi-x-lg"></i>
                                        </button>
                                    </div>
                                    <p class="text-muted mb-2">
                                        @if (!string.IsNullOrEmpty(item.VariantName))
                                        {
                                            <span class="me-2">Variant: @item.VariantName</span>
                                        }
                                        @if (!string.IsNullOrEmpty(item.ColorCode))
                                        {
                                            <span class="d-inline-flex align-items-center me-2">
                                                Color: 
                                                <span class="ms-1" style="width: 15px; height: 15px; border-radius: 50%; background-color: @item.ColorCode; display: inline-block;"></span>
                                            </span>
                                        }
                                    </p>
                                    <p class="text-muted mb-1">SKU: @item.OrderDetailId.Substring(0, 8) | Mã SP: @item.ProductId.Substring(0, 8)</p>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="input-group" style="width: 120px;">
                                            <button class="btn btn-outline-secondary" type="button" @onclick="() => UpdateQuantity(item.OrderDetailId, item.Quantity - 1)">-</button>
                                            <input type="text" class="form-control text-center" value="@item.Quantity" 
                                                   @onchange="(e) => HandleQuantityInput(item.OrderDetailId, e)" 
                                                   @onkeypress="(e) => HandleQuantityKeyPress(e, item.OrderDetailId, item.Quantity)">
                                            <button class="btn btn-outline-secondary" type="button" @onclick="() => UpdateQuantity(item.OrderDetailId, item.Quantity + 1)">+</button>
                                        </div>
                                        <div class="text-end">
                                            <span class="fw-bold">@FormatPrice(item.Price)đ</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <!-- Continue Shopping -->
                <div class="d-flex justify-content-between mb-4">
                    <a href="/collections" class="btn btn-outline-primary">
                        <i class="bi bi-arrow-left me-1"></i> Tiếp tục mua sắm
                    </a>
                    <button class="btn btn-outline-secondary" @onclick="UpdateCart">
                        <i class="bi bi-arrow-clockwise me-1"></i> Cập nhật giỏ hàng
                    </button>
                </div>
            </div>

            <!-- Order Summary -->
            <div class="col-lg-4">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">Tóm tắt đơn hàng</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tạm tính</span>
                            <span>@FormatPrice(order.Total)đ</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Phí vận chuyển</span>
                            <span>@(ShippingFee > 0 ? $"{FormatPrice(ShippingFee)}đ" : "Miễn phí")</span>
                        </div>
                        <hr />
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Tổng cộng</strong>
                            <strong class="h5 text-danger">@FormatPrice(order.Total + ShippingFee)đ</strong>
                        </div>

                        <!-- Coupon Code -->
                        @* <div class="mb-3">
                            <label for="couponCode" class="form-label">Mã giảm giá</label>
                            <div class="input-group">
                                <input type="text" class="form-control" id="couponCode" placeholder="Nhập mã giảm giá">
                                <button class="btn btn-outline-secondary" type="button">Áp dụng</button>
                            </div>
                        </div> *@

                        <div class="alert alert-info">
                            <div class="d-flex">
                                <i class="bi bi-info-circle me-2"></i>
                                <div>
                                    <div>Trạng thái đơn hàng: <strong>@order.OrderStatus</strong></div>
                                    <div>Phương thức thanh toán: <strong>@order.PaymentStatus</strong></div>
                                </div>
                            </div>
                        </div>

                        <button class="btn btn-primary w-100 mb-3" @onclick="Checkout">
                            Tiến hành thanh toán
                        </button>

                        <div class="text-center">
                            <small class="text-muted">Chúng tôi chấp nhận</small>
                            <div class="mt-2">
                                <i class="bi bi-credit-card me-2" style="font-size: 1.5rem;"></i>
                                <i class="bi bi-paypal me-2" style="font-size: 1.5rem;"></i>
                                <i class="bi bi-wallet2 me-2" style="font-size: 1.5rem;"></i>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    }

    <!-- Recently Viewed Products -->
    <div class="mt-5">
        <h3 class="mb-4">Sản phẩm tương tự</h3>
        <div class="row">
            @for (int i = 1; i <= 4; i++)
            {
                <div class="col-md-3 mb-4">
                    <div class="card h-100">
                        <img src="https://placehold.co/300x200" class="card-img-top" alt="Kính mẫu @i">
                        <div class="card-body">
                            <h5 class="card-title">Gọng kính model @i</h5>
                            <p class="card-text">@FormatPrice(1200000 + i * 100000)đ</p>
                            <a href="/product/@i" class="btn btn-sm btn-outline-primary">Xem chi tiết</a>
                            <button class="btn btn-sm btn-primary">
                                <i class="bi bi-cart-plus"></i>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private Order? order;
    private decimal ShippingFee => order?.Total >= 1000000 ? 0 : 30000;
    private List<ToastNotification> toastNotifications = new List<ToastNotification>();
    private bool isAuthenticated = false;
    private string? guestToken;

    protected override async Task OnInitializedAsync()
    {
        // Check authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        if (!isAuthenticated)
        {
            // Get guest token from localStorage
            guestToken = await LocalStorage.GetItemAsStringAsync("guestToken");
            
            // If no guest token exists, get a new one
            if (string.IsNullOrEmpty(guestToken))
            {
                try
                {
                    // Call the guest token endpoint
                    var tokenResponse = await Http.GetFromJsonAsync<GuestTokenResponse>("https://localhost:7222/api/customers/guest-token");
                    
                    if (tokenResponse != null && !string.IsNullOrEmpty(tokenResponse.Token))
                    {
                        // Store the guest token in localStorage
                        await LocalStorage.SetItemAsStringAsync("guestToken", tokenResponse.Token);
                        guestToken = tokenResponse.Token;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error getting guest token: {ex.Message}");
                    ShowToast("Lỗi", "Không thể tạo phiên mua sắm khách. Vui lòng thử lại sau.", ToastType.Error);
                }
            }
        }
        
        await LoadCartData();
    }

    private async Task LoadCartData()
    {
        try
        {
            isLoading = true;
            
            if (isAuthenticated)
            {
                // Regular authenticated user request
                order = await Http.GetFromJsonAsync<Order>("https://localhost:7222/api/orders/cart");
            }
            else
            {
                if (string.IsNullOrEmpty(guestToken))
                {
                    // If no guest token, show empty cart
                    order = new Order { OrderDetails = new List<OrderDetail>() };
                    return;
                }
                
                // Create a request with the guest token
                var request = new HttpRequestMessage(HttpMethod.Get, "https://localhost:7222/api/orders/cart");
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", guestToken);
                
                // Send the request
                var response = await Http.SendAsync(request);
                
                if (response.IsSuccessStatusCode)
                {
                    order = await response.Content.ReadFromJsonAsync<Order>();
                }
                else
                {
                    Console.WriteLine($"Error loading guest cart: {response.StatusCode}");
                    order = new Order { OrderDetails = new List<OrderDetail>() };
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cart: {ex.Message}");
            // In a real app, you would handle this error appropriately
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RemoveFromCart(string orderDetailId)
    {
        try 
        {
            HttpResponseMessage response;
            
            if (isAuthenticated)
            {
                // Regular authenticated user request
                response = await Http.DeleteAsync($"https://localhost:7222/api/orders/details/{orderDetailId}");
            }
            else
            {
                // Create a request with the guest token
                var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7222/api/orders/details/{orderDetailId}");
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", guestToken);
                
                // Send the request
                response = await Http.SendAsync(request);
            }
            
            if (response.IsSuccessStatusCode)
            {
                if (order != null)
                {
                    var item = order.OrderDetails.FirstOrDefault(i => i.OrderDetailId == orderDetailId);
                    if (item != null)
                    {
                        order.OrderDetails.Remove(item);
                        // Recalculate total
                        order.Total = order.OrderDetails.Sum(d => d.Total);
                        
                        // Show success toast
                        ShowToast("Xóa sản phẩm thành công", 
                                 "Sản phẩm đã được xóa khỏi giỏ hàng", 
                                 ToastType.Success);
                    }
                }
            }
            else
            {
                // Show error toast
                ShowToast("Xóa sản phẩm thất bại", 
                         "Không thể xóa sản phẩm khỏi giỏ hàng. Vui lòng thử lại sau.", 
                         ToastType.Error);
                Console.WriteLine($"Error removing item from cart: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Show error toast
            ShowToast("Lỗi", 
                     "Đã xảy ra lỗi khi xóa sản phẩm khỏi giỏ hàng", 
                     ToastType.Error);
            Console.WriteLine($"Error removing item from cart: {ex.Message}");
        }
    }

    private async Task UpdateQuantity(string orderDetailId, int newQuantity)
    {
        if (newQuantity <= 0 || order == null) return;
        
        try
        {
            // Create request body
            var updateRequest = new UpdateQuantityRequest
            {
                Quantity = newQuantity
            };
            
            HttpResponseMessage response;
            
            if (isAuthenticated)
            {
                // Regular authenticated user request
                response = await Http.PutAsJsonAsync($"https://localhost:7222/api/orders/details/{orderDetailId}", updateRequest);
            }
            else
            {
                // Create a request with the guest token
                var request = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:7222/api/orders/details/{orderDetailId}");
                request.Content = JsonContent.Create(updateRequest);
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", guestToken);
                
                // Send the request
                response = await Http.SendAsync(request);
            }
            
            if (response.IsSuccessStatusCode)
            {
                // Update UI if API call is successful
                var item = order.OrderDetails.FirstOrDefault(i => i.OrderDetailId == orderDetailId);
                if (item != null)
                {
                    item.Quantity = newQuantity;
                    item.Total = item.Price * newQuantity;
                    // Recalculate total
                    order.Total = order.OrderDetails.Sum(d => d.Total);
                    
                    // Show success toast
                    ShowToast("Cập nhật số lượng thành công", 
                             "Số lượng sản phẩm đã được cập nhật", 
                             ToastType.Success);
                }
            }
            else
            {
                // Show error toast
                ShowToast("Cập nhật số lượng thất bại", 
                         "Không thể cập nhật số lượng sản phẩm. Vui lòng thử lại sau.", 
                         ToastType.Error);
                Console.WriteLine($"Error updating quantity: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Show error toast
            ShowToast("Lỗi", 
                     "Đã xảy ra lỗi khi cập nhật số lượng sản phẩm", 
                     ToastType.Error);
            Console.WriteLine($"Error updating quantity: {ex.Message}");
        }
    }

    private async Task UpdateCart()
    {
        // In a real app, this would update the cart on the server
        await LoadCartData();
    }

    private void Checkout()
    {
        // Navigate to checkout page
        NavigationManager.NavigateTo("/checkout");
    }

    private string FormatPrice(decimal price)
    {
        return price.ToString("#,##0");
    }

    private void ShowToast(string title, string message, ToastType type)
    {
        var toast = new ToastNotification
        {
            Id = Guid.NewGuid().ToString(),
            Title = title,
            Message = message,
            Type = type,
            Timestamp = DateTime.Now
        };
        
        toastNotifications.Add(toast);
        
        // Auto-remove the toast after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            await InvokeAsync(() =>
            {
                if (toastNotifications.Contains(toast))
                {
                    toastNotifications.Remove(toast);
                    StateHasChanged();
                }
            });
        });
        
        StateHasChanged();
    }
    
    private void RemoveToast(ToastNotification toast)
    {
        toastNotifications.Remove(toast);
        StateHasChanged();
    }

    // Toast notification models
    private enum ToastType
    {
        Success,
        Error,
        Warning,
        Info
    }
    
    private class ToastNotification
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public ToastType Type { get; set; }
        public DateTime Timestamp { get; set; }
        public bool IsHtml { get; set; }
        
        public string HeaderClass => Type switch
        {
            ToastType.Success => "bg-success text-white",
            ToastType.Error => "bg-danger text-white",
            ToastType.Warning => "bg-warning text-dark",
            ToastType.Info => "bg-info text-dark",
            _ => "bg-primary text-white"
        };
        
        public string Icon => Type switch
        {
            ToastType.Success => "bi-check-circle-fill",
            ToastType.Error => "bi-exclamation-triangle-fill",
            ToastType.Warning => "bi-exclamation-circle-fill",
            ToastType.Info => "bi-info-circle-fill",
            _ => "bi-bell-fill"
        };
    }

    public class OrderDetail
    {
        public string OrderDetailId { get; set; } = "";
        public string ProductId { get; set; } = "";
        public string ProductName { get; set; } = "";
        public string VariantName { get; set; } = "";
        public string ColorCode { get; set; } = "";
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public string ImageUrl { get; set; } = "";
        public decimal Total { get; set; }
    }

    public class Order
    {
        public string OrderId { get; set; } = "";
        public string CustomerId { get; set; } = "";
        public decimal Total { get; set; }
        public string PaymentStatus { get; set; } = "";
        public string OrderStatus { get; set; } = "";
        public List<OrderDetail> OrderDetails { get; set; } = new List<OrderDetail>();
    }

    private class UpdateQuantityRequest
    {
        public int Quantity { get; set; }
    }

    private async Task HandleQuantityInput(string orderDetailId, ChangeEventArgs e)
    {
        if (e.Value != null && int.TryParse(e.Value.ToString(), out int newQuantity))
        {
            if (newQuantity > 0)
            {
                await UpdateQuantity(orderDetailId, newQuantity);
            }
        }
    }

    private async Task HandleQuantityKeyPress(KeyboardEventArgs e, string orderDetailId, int currentQuantity)
    {
        if (e.Key == "Enter")
        {
            // The actual update will be handled by HandleQuantityInput
            // This is just to trigger the update on Enter key
        }
    }

    // Response model for the guest token API
    private class GuestTokenResponse
    {
        public string Token { get; set; } = string.Empty;
    }
} 