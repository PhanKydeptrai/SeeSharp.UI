@page "/wishlist"
@using Blazored.LocalStorage
@using System.Net.Http.Json
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http

<div class="container py-5">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Danh sách sản phẩm yêu thích</h1>
            
            <AuthorizeView>
                <Authorized>
                    @if (isLoading)
                    {
                        <div class="text-center my-5">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-2">Đang tải danh sách sản phẩm yêu thích...</p>
                        </div>
                    }
                    else if (wishlistItems == null || !wishlistItems.Any())
                    {
                        <div class="text-center my-5">
                            <i class="bi bi-heart-break fs-1 text-secondary"></i>
                            <h4 class="mt-3">Danh sách yêu thích của bạn đang trống</h4>
                            <p class="text-muted">Hãy thêm sản phẩm yêu thích để xem ở đây</p>
                            <a href="/" class="btn btn-primary mt-3">Tiếp tục mua sắm</a>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th style="width: 100px;">Hình ảnh</th>
                                        <th>Sản phẩm</th>
                                        <th>Giá</th>
                                        <th>Danh mục</th>
                                        <th style="width: 150px;">Thao tác</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in wishlistItems)
                                    {
                                        <tr>
                                            <td>
                                                <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "https://placehold.co/100" : item.ImageUrl)" 
                                                     class="img-fluid" alt="@item.ProductName" style="width:100px;height:100px;object-fit:cover;">
                                            </td>
                                            <td>
                                                <a href="/product/@item.ProductVariantId" class="text-decoration-none">
                                                    <h6 class="mb-1">@item.ProductName</h6>
                                                </a>
                                                @if (!string.IsNullOrEmpty(item.Description))
                                                {
                                                    <small class="text-muted">@(item.Description.Length > 100 ? item.Description.Substring(0, 100) + "..." : item.Description)</small>
                                                }
                                            </td>
                                            <td class="fw-bold">@(item.Price.ToString("N0"))đ</td>
                                            <td>@item.CategoryName</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button class="btn btn-sm btn-primary" @onclick="() => AddToCart(item)">
                                                        <i class="bi bi-cart-plus"></i> Giỏ hàng
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFromWishlist(item.WishItemId)">
                                                        <i class="bi bi-x"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        
                        @if (paging.TotalCount > paging.PageSize)
                        {
                            <div class="d-flex justify-content-center mt-4">
                                <nav>
                                    <ul class="pagination">
                                        <li class="page-item @(paging.HasPreviousPage ? "" : "disabled")">
                                            <a class="page-link" href="javascript:void(0)" @onclick="PreviousPage">
                                                <i class="bi bi-chevron-left"></i>
                                            </a>
                                        </li>
                                        
                                        @for (int i = 1; i <= Math.Ceiling((double)paging.TotalCount / paging.PageSize); i++)
                                        {
                                            var pageNumber = i;
                                            <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                                <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(pageNumber)">
                                                    @pageNumber
                                                </a>
                                            </li>
                                        }
                                        
                                        <li class="page-item @(paging.HasNextPage ? "" : "disabled")">
                                            <a class="page-link" href="javascript:void(0)" @onclick="NextPage">
                                                <i class="bi bi-chevron-right"></i>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    }
                </Authorized>
                <NotAuthorized>
                    <div class="text-center my-5">
                        <i class="bi bi-person-lock fs-1 text-secondary"></i>
                        <h4 class="mt-3">Vui lòng đăng nhập để xem danh sách yêu thích</h4>
                        <p class="text-muted">Đăng nhập để lưu và quản lý các sản phẩm yêu thích của bạn</p>
                        <a href="/login" class="btn btn-primary mt-3">Đăng nhập ngay</a>
                    </div>
                </NotAuthorized>
            </AuthorizeView>
        </div>
    </div>
</div>

@if (showToast)
{
    <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 5">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header @toastHeaderClass">
                <strong class="me-auto text-white">@toastTitle</strong>
                <button type="button" class="btn-close btn-close-white" @onclick="() => showToast = false"></button>
            </div>
            <div class="toast-body">
                @toastMessage
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private List<WishlistItem>? wishlistItems;
    private string? accessToken;
    private int currentPage = 1;
    private int pageSize = 10;
    private PagingInfo paging = new PagingInfo();
    
    // Toast notification
    private bool showToast = false;
    private string toastTitle = "";
    private string toastMessage = "";
    private string toastHeaderClass = "";

    protected override async Task OnInitializedAsync()
    {
        accessToken = await localStorage.GetItemAsync<string>("accessToken");
        await LoadWishlistItems();
    }

    private async Task LoadWishlistItems()
    {
        try
        {
            isLoading = true;
            
            // Set authorization header if user is logged in
            if (!string.IsNullOrEmpty(accessToken))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            }
            
            var response = await Http.GetFromJsonAsync<WishlistResponse>($"https://localhost:7222/api/wishitems?page={currentPage}&pageSize={pageSize}");
            
            if (response != null)
            {
                wishlistItems = response.Items.ToList();
                paging = new PagingInfo
                {
                    Page = response.Page,
                    PageSize = response.PageSize,
                    TotalCount = response.TotalCount,
                    HasNextPage = response.HasNextPage,
                    HasPreviousPage = response.HasPreviousPage
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading wishlist: {ex.Message}");
            wishlistItems = new List<WishlistItem>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RemoveFromWishlist(string wishItemId)
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7222/api/wishitems/{wishItemId}");
            
            if (response.IsSuccessStatusCode)
            {
                // Remove the item from the local list
                if (wishlistItems != null)
                {
                    var itemToRemove = wishlistItems.FirstOrDefault(w => w.WishItemId == wishItemId);
                    if (itemToRemove != null)
                    {
                        wishlistItems.Remove(itemToRemove);
                    }
                }
                
                ShowToast("Thành công", "Đã xóa sản phẩm khỏi danh sách yêu thích", "bg-success");
            }
            else
            {
                ShowToast("Lỗi", "Không thể xóa sản phẩm khỏi danh sách yêu thích", "bg-danger");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing wishlist item: {ex.Message}");
            ShowToast("Lỗi", "Đã xảy ra lỗi khi xóa sản phẩm", "bg-danger");
        }
    }

    private async Task AddToCart(WishlistItem item)
    {
        try
        {
            var orderRequest = new OrderRequest
            {
                ProductVariantId = item.ProductVariantId,
                Quantity = 1
            };
            
            var response = await Http.PostAsJsonAsync("https://localhost:7222/api/orders", orderRequest);
            
            if (response.IsSuccessStatusCode)
            {
                ShowToast("Thành công", $"Đã thêm {item.ProductName} vào giỏ hàng", "bg-success");
            }
            else
            {
                ShowToast("Lỗi", "Không thể thêm sản phẩm vào giỏ hàng", "bg-danger");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding to cart: {ex.Message}");
            ShowToast("Lỗi", "Đã xảy ra lỗi khi thêm vào giỏ hàng", "bg-danger");
        }
    }

    private void ShowToast(string title, string message, string headerClass)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = headerClass;
        showToast = true;
        
        // Auto-hide toast after 3 seconds
        Task.Delay(3000).ContinueWith(_ => 
        {
            showToast = false;
            StateHasChanged();
        });
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadWishlistItems();
        }
    }

    private async Task NextPage()
    {
        if (paging.HasNextPage)
        {
            currentPage++;
            await LoadWishlistItems();
        }
    }

    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadWishlistItems();
    }

    public class WishlistItem
    {
        public string WishItemId { get; set; } = string.Empty;
        public string ProductVariantId { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public string Status { get; set; } = string.Empty;
        public string CategoryName { get; set; } = string.Empty;
    }

    public class WishlistResponse
    {
        public List<WishlistItem> Items { get; set; } = new();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
    }

    public class PagingInfo
    {
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
    }

    public class OrderRequest
    {
        public string ProductVariantId { get; set; }
        public int Quantity { get; set; }
    }
} 