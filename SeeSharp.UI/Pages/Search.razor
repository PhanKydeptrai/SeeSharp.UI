@page "/search"
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>Kết quả tìm kiếm</PageTitle>

<style>
    .product-card {
        transition: transform 0.3s, box-shadow 0.3s;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
    
    .loading-spinner {
        width: 3rem;
        height: 3rem;
        margin-bottom: 1rem;
    }
    
    /* Toast Notification */
    .toast-container {
        z-index: 1080;
    }
    
    .toast {
        min-width: 300px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        animation: toast-in-right 0.3s ease-in-out;
    }
    
    @@keyframes toast-in-right {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    .toast-header {
        padding: 0.75rem 1rem;
    }
    
    .toast-body {
        padding: 1rem;
    }
    
    .toast .btn-close {
        background-color: transparent;
        opacity: 0.8;
    }
    
    .toast .btn-close:hover {
        opacity: 1;
    }
</style>

<!-- Toast Notification Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" id="toastContainer">
    @foreach (var toast in toastNotifications)
    {
        <div class="toast show mb-2" role="alert" aria-live="assertive" aria-atomic="true" id="@toast.Id">
            <div class="toast-header @toast.HeaderClass">
                <i class="bi @toast.Icon me-2"></i>
                <strong class="me-auto">@toast.Title</strong>
                <small>@toast.Timestamp.ToString("HH:mm:ss")</small>
                <button type="button" class="btn-close" aria-label="Close" @onclick="() => RemoveToast(toast)"></button>
            </div>
            <div class="toast-body">
                @if (toast.IsHtml)
                {
                    @((MarkupString)toast.Message)
                }
                else
                {
                    @toast.Message
                }
            </div>
        </div>
    }
</div>

<div class="container mt-4">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
            <li class="breadcrumb-item active" aria-current="page">Tìm kiếm: @searchTerm</li>
        </ol>
    </nav>

    <h3 class="mb-4">Kết quả tìm kiếm cho: "@searchTerm"</h3>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border loading-spinner text-primary" role="status">
                <span class="visually-hidden">Đang tải...</span>
            </div>
            <div>Đang tải dữ liệu...</div>
        </div>
    }
    else if (productResponseList == null || productResponseList.Items == null || !productResponseList.Items.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            Không tìm thấy sản phẩm phù hợp với từ khóa "@searchTerm".
        </div>
        <p>Gợi ý:</p>
        <ul>
            <li>Kiểm tra lại chính tả</li>
            <li>Sử dụng từ khóa ngắn gọn hơn</li>
            <li>Thử tìm kiếm với từ khóa khác</li>
        </ul>
        <a href="/collections" class="btn btn-primary mt-3">Xem tất cả sản phẩm</a>
    }
    else
    {
        <div class="row">
            @foreach (var item in productResponseList.Items)
            {
                bool isOutOfStock = item.Status == "OutOfStock";
                <div class="col-md-3 mb-4">
                    <div class="card h-100 product-card @(isOutOfStock ? "out-of-stock" : "")">
                        <div class="position-relative">
                            <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "https://placehold.co/300x200" : item.ImageUrl)" 
                                 class="card-img-top" alt="@item.ProductName">
                            @if (item.Status == "Sale")
                            {
                                <span class="badge bg-danger position-absolute top-0 end-0 m-2">Sale</span>
                            }
                            @if (item.Status == "New")
                            {
                                <span class="badge bg-success position-absolute top-0 start-0 m-2">Mới</span>
                            }
                            @if (isOutOfStock)
                            {
                                <span class="badge bg-secondary position-absolute top-0 end-0 m-2">Hết hàng</span>
                            }
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@item.ProductName</h5>
                            <p class="text-muted small">@item.CategoryName</p>
                            <p class="card-text">@item.PriceOfBaseVariant.ToString("N0")đ</p>
                            <div class="mt-auto d-flex">
                                <a href="/product/@item.ProductId" class="btn btn-sm btn-outline-primary flex-grow-1 me-2">Xem chi tiết</a>
                                <button class="btn btn-sm btn-primary @(isOutOfStock ? "disabled" : "")" 
                                        disabled="@isOutOfStock"
                                        @onclick="() => AddToCart(item.BaseVariantId)">
                                    <i class="bi bi-cart-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Pagination -->
        <nav aria-label="Search results pagination" class="my-4">
            <ul class="pagination justify-content-center">
                <li class="@(currentPage == 1 ? "page-item disabled" : "page-item")">
                    <a class="page-link" @onclick="() => ChangePage(currentPage - 1)" href="javascript:void(0);">Trước</a>
                </li>
                
                @if (productResponseList != null)
                {
                    int totalPages = (int)Math.Ceiling((double)productResponseList.TotalCount / pageSize);
                    
                    // Hiển thị tối đa 5 nút phân trang
                    int startPage = Math.Max(1, currentPage - 2);
                    int endPage = Math.Min(totalPages, startPage + 4);
                    
                    if (endPage - startPage < 4)
                    {
                        startPage = Math.Max(1, endPage - 4);
                    }
                    
                    for (int i = startPage; i <= endPage; i++)
                    {
                        int pageNumber = i;
                        <li class="@(currentPage == pageNumber ? "page-item active" : "page-item")">
                            <a class="page-link" @onclick="() => ChangePage(pageNumber)" href="javascript:void(0);">@pageNumber</a>
                        </li>
                    }
                    
                    <li class="@(currentPage >= totalPages ? "page-item disabled" : "page-item")">
                        <a class="page-link" @onclick="() => ChangePage(currentPage + 1)" href="javascript:void(0);">Sau</a>
                    </li>
                }
                else
                {
                    <li class="page-item active"><a class="page-link" href="javascript:void(0);">1</a></li>
                    <li class="page-item disabled">
                        <a class="page-link" href="javascript:void(0);">Sau</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private string newSearchTerm = string.Empty;
    private PagedList<ProductResponse>? productResponseList { get; set; }
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 12;
    private List<ToastNotification> toastNotifications = new List<ToastNotification>();

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateSearchFromUrl();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateSearchFromUrl();
    }

    private async Task UpdateSearchFromUrl()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("q", out var param))
        {
            var newTerm = param.First();
            if (newTerm != searchTerm)
            {
                searchTerm = newTerm;
                newSearchTerm = newTerm; // Update the input field as well
                currentPage = 1;
                await SearchProducts();
            }
        }
        else
        {
            isLoading = false;
        }
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await UpdateSearchFromUrl();
            StateHasChanged();
        });
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PerformSearch();
        }
    }

    private async Task PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(newSearchTerm))
        {
            currentPage = 1;
            NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(newSearchTerm)}");
        }
    }

    private async Task SearchProducts()
    {
        isLoading = true;
        
        try
        {
            string url = $"https://localhost:7222/api/products?page={currentPage}&pageSize={pageSize}&searchTerm={Uri.EscapeDataString(searchTerm)}";
            
            productResponseList = await Http.GetFromJsonAsync<PagedList<ProductResponse>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching products: {ex.Message}");
            productResponseList = new PagedList<ProductResponse>(new List<ProductResponse>(), currentPage, pageSize, 0);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task ChangePage(int page)
    {
        if (page < 1) return;
        if (productResponseList != null && page > Math.Ceiling((double)productResponseList.TotalCount / pageSize)) return;
        
        currentPage = page;
        await SearchProducts();
    }

    private async Task AddToCart(Guid productVariantId)
    {
        try
        {
            var orderRequest = new OrderRequest
            {
                ProductVariantId = productVariantId,
                Quantity = 1
            };
            
            var response = await Http.PostAsJsonAsync("https://localhost:7222/api/orders", orderRequest);
            
            if (response.IsSuccessStatusCode)
            {
                // Find the product for the toast message
                var addedProduct = productResponseList?.Items.FirstOrDefault(p => p.BaseVariantId == productVariantId);
                
                if (addedProduct != null)
                {
                    // Show success toast
                    ShowCartToast($"Đã thêm 1 sản phẩm {addedProduct.ProductName} vào giỏ hàng");
                }
                else
                {
                    ShowToast("Thêm vào giỏ hàng thành công", "Sản phẩm đã được thêm vào giỏ hàng", ToastType.Success);
                }
            }
            else
            {
                // Show error toast
                ShowToast("Thêm vào giỏ hàng thất bại", 
                          "Không thể thêm sản phẩm vào giỏ hàng. Vui lòng thử lại sau.", 
                          ToastType.Error);
                Console.WriteLine($"Error adding to cart: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Show error toast
            ShowToast("Lỗi", 
                      "Đã xảy ra lỗi khi thêm sản phẩm vào giỏ hàng", 
                      ToastType.Error);
            Console.WriteLine($"Error adding to cart: {ex.Message}");
        }
    }
    
    private void ShowCartToast(string message)
    {
        // Create HTML content with button to navigate to cart page
        var cartToastId = Guid.NewGuid().ToString();
        var toast = new ToastNotification
        {
            Id = cartToastId,
            Title = "Thêm vào giỏ hàng thành công",
            Message = $"{message} <div class='mt-2'><a href='/cart' class='btn btn-primary btn-sm me-2'>Xem giỏ hàng</a><button class='btn btn-outline-secondary btn-sm' onclick=\"document.getElementById('{cartToastId}').remove()\">Tiếp tục mua sắm</button></div>",
            Type = ToastType.Success,
            Timestamp = DateTime.Now,
            IsHtml = true
        };
        
        toastNotifications.Add(toast);
        
        // Auto-remove the toast after 8 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(8000);
            await InvokeAsync(() =>
            {
                if (toastNotifications.Contains(toast))
                {
                    toastNotifications.Remove(toast);
                    StateHasChanged();
                }
            });
        });
        
        StateHasChanged();
    }

    private void ShowToast(string title, string message, ToastType type)
    {
        var toast = new ToastNotification
        {
            Id = Guid.NewGuid().ToString(),
            Title = title,
            Message = message,
            Type = type,
            Timestamp = DateTime.Now
        };
        
        toastNotifications.Add(toast);
        
        // Auto-remove the toast after 5 seconds
        _ = Task.Run(async () =>
        {
            await Task.Delay(5000);
            await InvokeAsync(() =>
            {
                if (toastNotifications.Contains(toast))
                {
                    toastNotifications.Remove(toast);
                    StateHasChanged();
                }
            });
        });
        
        StateHasChanged();
    }
    
    private void RemoveToast(ToastNotification toast)
    {
        toastNotifications.Remove(toast);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    #region Models
    private class VariantResponse
    {
        public Guid ProductVariantId { get; set; }
        public Guid ProductId { get; set; }
        public string VariantName { get; set; } = string.Empty;
        public string ColorCode { get; set; } = string.Empty;
        public string ProductCode { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public string? ImageUrl { get; set; }
        public bool IsAvailable { get; set; }
    }

    private class ProductResponse
    {
        public Guid ProductId { get; set; }
        public Guid BaseVariantId { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public decimal PriceOfBaseVariant { get; set; }
        public string? ImageUrl { get; set; }
        public string? Description { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string CategoryName { get; set; } = string.Empty;
        public VariantResponse[] Variants { get; set; } = Array.Empty<VariantResponse>();
    }

    private class PagedList<T>
    {
        public List<T> Items { get; set; } = new List<T>();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public bool HasNextPage => Page * PageSize < TotalCount;
        public bool HaspreviousPage => Page > 1;
        
        public PagedList() {}
        
        public PagedList(List<T> items, int page, int pageSize, int totalCount)
        {
            Items = items;
            Page = page;
            PageSize = pageSize;
            TotalCount = totalCount;
        }
    }
    
    private class OrderRequest
    {
        public Guid ProductVariantId { get; set; }
        public int Quantity { get; set; }
    }
    
    // Toast notification models
    private enum ToastType
    {
        Success,
        Error,
        Warning,
        Info
    }
    
    private class ToastNotification
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public string Message { get; set; }
        public ToastType Type { get; set; }
        public DateTime Timestamp { get; set; }
        public bool IsHtml { get; set; }
        
        public string HeaderClass => Type switch
        {
            ToastType.Success => "bg-success text-white",
            ToastType.Error => "bg-danger text-white",
            ToastType.Warning => "bg-warning text-dark",
            ToastType.Info => "bg-info text-dark",
            _ => "bg-primary text-white"
        };
        
        public string Icon => Type switch
        {
            ToastType.Success => "bi-check-circle-fill",
            ToastType.Error => "bi-exclamation-triangle-fill",
            ToastType.Warning => "bi-exclamation-circle-fill",
            ToastType.Info => "bi-info-circle-fill",
            _ => "bi-bell-fill"
        };
    }
    #endregion
} 