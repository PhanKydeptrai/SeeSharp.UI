@page "/search"
@using System.Net.Http.Json
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Web
@inject HttpClient Http
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>Kết quả tìm kiếm</PageTitle>

<style>
    .product-card {
        transition: transform 0.3s, box-shadow 0.3s;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
    
    .loading-spinner {
        width: 3rem;
        height: 3rem;
        margin-bottom: 1rem;
    }
</style>

<div class="container mt-4">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
            <li class="breadcrumb-item active" aria-current="page">Tìm kiếm: @searchTerm</li>
        </ol>
    </nav>

    <h3 class="mb-4">Kết quả tìm kiếm cho: "@searchTerm"</h3>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border loading-spinner text-primary" role="status">
                <span class="visually-hidden">Đang tải...</span>
            </div>
            <div>Đang tải dữ liệu...</div>
        </div>
    }
    else if (productResponseList == null || productResponseList.Items == null || !productResponseList.Items.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i>
            Không tìm thấy sản phẩm phù hợp với từ khóa "@searchTerm".
        </div>
        <p>Gợi ý:</p>
        <ul>
            <li>Kiểm tra lại chính tả</li>
            <li>Sử dụng từ khóa ngắn gọn hơn</li>
            <li>Thử tìm kiếm với từ khóa khác</li>
        </ul>
        <a href="/collections" class="btn btn-primary mt-3">Xem tất cả sản phẩm</a>
    }
    else
    {
        <div class="row">
            @foreach (var item in productResponseList.Items)
            {
                <div class="col-md-3 mb-4">
                    <div class="card h-100 product-card">
                        <div class="position-relative">
                            <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "https://placehold.co/300x200" : item.ImageUrl)" 
                                 class="card-img-top" alt="@item.ProductName">
                            @if (item.Status == "Sale")
                            {
                                <span class="badge bg-danger position-absolute top-0 end-0 m-2">Sale</span>
                            }
                            @if (item.Status == "New")
                            {
                                <span class="badge bg-success position-absolute top-0 start-0 m-2">Mới</span>
                            }
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@item.ProductName</h5>
                            <p class="text-muted small">@item.CategoryName</p>
                            <p class="card-text">@item.PriceOfBaseVariant.ToString("N0")đ</p>
                            <div class="mt-auto d-flex">
                                <a href="/product/@item.ProductId" class="btn btn-sm btn-outline-primary flex-grow-1 me-2">Xem chi tiết</a>
                                <button class="btn btn-sm btn-primary">
                                    <i class="bi bi-cart-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Pagination -->
        <nav aria-label="Search results pagination" class="my-4">
            <ul class="pagination justify-content-center">
                <li class="@(currentPage == 1 ? "page-item disabled" : "page-item")">
                    <a class="page-link" @onclick="() => ChangePage(currentPage - 1)" href="javascript:void(0);">Trước</a>
                </li>
                
                @if (productResponseList != null)
                {
                    int totalPages = (int)Math.Ceiling((double)productResponseList.TotalCount / pageSize);
                    
                    // Hiển thị tối đa 5 nút phân trang
                    int startPage = Math.Max(1, currentPage - 2);
                    int endPage = Math.Min(totalPages, startPage + 4);
                    
                    if (endPage - startPage < 4)
                    {
                        startPage = Math.Max(1, endPage - 4);
                    }
                    
                    for (int i = startPage; i <= endPage; i++)
                    {
                        int pageNumber = i;
                        <li class="@(currentPage == pageNumber ? "page-item active" : "page-item")">
                            <a class="page-link" @onclick="() => ChangePage(pageNumber)" href="javascript:void(0);">@pageNumber</a>
                        </li>
                    }
                    
                    <li class="@(currentPage >= totalPages ? "page-item disabled" : "page-item")">
                        <a class="page-link" @onclick="() => ChangePage(currentPage + 1)" href="javascript:void(0);">Sau</a>
                    </li>
                }
                else
                {
                    <li class="page-item active"><a class="page-link" href="javascript:void(0);">1</a></li>
                    <li class="page-item disabled">
                        <a class="page-link" href="javascript:void(0);">Sau</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@code {
    private string searchTerm = string.Empty;
    private string newSearchTerm = string.Empty;
    private PagedList<ProductResponse>? productResponseList { get; set; }
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 12;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await UpdateSearchFromUrl();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateSearchFromUrl();
    }

    private async Task UpdateSearchFromUrl()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("q", out var param))
        {
            var newTerm = param.First();
            if (newTerm != searchTerm)
            {
                searchTerm = newTerm;
                newSearchTerm = newTerm; // Update the input field as well
                currentPage = 1;
                await SearchProducts();
            }
        }
        else
        {
            isLoading = false;
        }
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        InvokeAsync(async () =>
        {
            await UpdateSearchFromUrl();
            StateHasChanged();
        });
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PerformSearch();
        }
    }

    private async Task PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(newSearchTerm))
        {
            currentPage = 1;
            NavigationManager.NavigateTo($"/search?q={Uri.EscapeDataString(newSearchTerm)}");
        }
    }

    private async Task SearchProducts()
    {
        isLoading = true;
        
        try
        {
            string url = $"https://localhost:7222/api/products?page={currentPage}&pageSize={pageSize}&searchTerm={Uri.EscapeDataString(searchTerm)}";
            
            productResponseList = await Http.GetFromJsonAsync<PagedList<ProductResponse>>(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching products: {ex.Message}");
            productResponseList = new PagedList<ProductResponse>(new List<ProductResponse>(), currentPage, pageSize, 0);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task ChangePage(int page)
    {
        if (page < 1) return;
        if (productResponseList != null && page > Math.Ceiling((double)productResponseList.TotalCount / pageSize)) return;
        
        currentPage = page;
        await SearchProducts();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    #region Models
    private class VariantResponse
    {
        public Guid ProductVariantId { get; set; }
        public Guid ProductId { get; set; }
        public string VariantName { get; set; } = string.Empty;
        public string ColorCode { get; set; } = string.Empty;
        public string ProductCode { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public string? ImageUrl { get; set; }
        public bool IsAvailable { get; set; }
    }

    private class ProductResponse
    {
        public Guid ProductId { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public decimal PriceOfBaseVariant { get; set; }
        public string? ImageUrl { get; set; }
        public string? Description { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string CategoryName { get; set; } = string.Empty;
        public VariantResponse[] Variants { get; set; } = Array.Empty<VariantResponse>();
    }

    private class PagedList<T>
    {
        public List<T> Items { get; set; } = new List<T>();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public bool HasNextPage => Page * PageSize < TotalCount;
        public bool HaspreviousPage => Page > 1;
        
        public PagedList() {}
        
        public PagedList(List<T> items, int page, int pageSize, int totalCount)
        {
            Items = items;
            Page = page;
            PageSize = pageSize;
            TotalCount = totalCount;
        }
    }
    #endregion
} 