@page "/userprofile"
@using Blazored.LocalStorage
@using SeeSharp.UI.Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.ComponentModel
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>User Profile</PageTitle>

<style>
    /* Loading Overlay */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        backdrop-filter: blur(2px);
    }
    
    .loading-content {
        background-color: white;
        padding: 20px 30px;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        text-align: center;
    }
    
    .loading-spinner {
        width: 3rem;
        height: 3rem;
        margin-bottom: 1rem;
    }
    
    /* Skeleton Loading */
    .skeleton {
        position: relative;
        overflow: hidden;
        background-color: #f0f0f0;
    }
    
    .skeleton::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        transform: translateX(-100%);
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
        animation: shimmer 1.5s infinite;
    }
    
    .skeleton-circle {
        width: 100px;
        height: 100px;
        border-radius: 50%;
    }
    
    .skeleton-text {
        height: 16px;
        margin-bottom: 8px;
        border-radius: 4px;
    }
    
    .skeleton-text.title {
        height: 22px;
        width: 80%;
    }
    
    .skeleton-text.small {
        width: 60%;
        height: 14px;
    }
    
    .skeleton-input {
        height: 38px;
        border-radius: 4px;
        margin-bottom: 1rem;
    }
    
    .skeleton-button {
        height: 38px;
        width: 120px;
        border-radius: 4px;
        margin-top: 12px;
    }
</style>

@if (isPageLoading)
{
    <div class="loading-overlay">
        <div class="loading-content">
            <div class="spinner-border loading-spinner text-primary" role="status">
                <span class="visually-hidden">Đang tải...</span>
            </div>
            <div>Đang tải dữ liệu...</div>
        </div>
    </div>
}

<AuthorizeView Context="authContext">
    <Authorized>
        <div class="container-fluid mt-4" style="min-height: 85vh; padding-bottom: 50px;">
            <div class="row">
                <!-- Left Sidebar Menu -->
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            @if (isLoading)
                            {
                                <div class="text-center mb-4">
                                    <div class="skeleton skeleton-circle mx-auto"></div>
                                    <div class="skeleton skeleton-text title mx-auto mt-2" style="width: 150px;"></div>
                                </div>
                                <div class="list-group">
                                    <div class="skeleton skeleton-input mb-2"></div>
                                    <div class="skeleton skeleton-input mb-2"></div>
                                    <div class="skeleton skeleton-input"></div>
                                </div>
                            }
                            else
                            {
                                @if (!string.IsNullOrEmpty(userProfile.ImageUrl))
                                {
                                    <div class="text-center mb-4">
                                        <img src="@userProfile.ImageUrl" alt="Profile Picture" class="rounded-circle"
                                        style="width: 100px; height: 100px; object-fit: cover;" />
                                        <h5 class="mt-2">@userProfile.UserName</h5>
                                    </div>
                                }
                                <div class="list-group">
                                    <button class="list-group-item list-group-item-action @(activeSection == "profile")"
                                    @onclick="() => SetActiveSection(ProfileSection)">
                                        <i class="bi bi-person me-2"></i>Profile Information
                                    </button>
                                    <button class="list-group-item list-group-item-action @(activeSection == "password")"
                                    @onclick="() => SetActiveSection(PasswordSection)">
                                        <i class="bi bi-key me-2"></i>Change Password
                                    </button>
                                    <button class="list-group-item list-group-item-action @(activeSection == "orders")"
                                    @onclick="() => SetActiveSection(OrdersSection)">
                                        <i class="bi bi-bag me-2"></i>Order History
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Main Content Area -->
                <div class="col-md-9">
                    @if (activeSection == "profile")
                    {
                        <div class="card">
                            <div class="card-header">
                                <h4>Profile Information</h4>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(statusMessage))
                                {
                                    <div class="alert @statusAlertClass alert-dismissible fade show" role="alert">
                                        @statusMessage
                                        <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
                                    </div>
                                }

                                @if (isLoading)
                                {
                                    <div class="mb-4 text-center">
                                        <div class="skeleton" style="width: 150px; height: 150px; border-radius: 50%; margin: 0 auto;"></div>
                                        <div class="skeleton skeleton-text mt-2 mx-auto" style="width: 200px;"></div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="skeleton skeleton-text small mb-1"></div>
                                        <div class="skeleton skeleton-input"></div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="skeleton skeleton-text small mb-1"></div>
                                        <div class="skeleton skeleton-input"></div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="skeleton skeleton-text small mb-1"></div>
                                        <div class="skeleton skeleton-input"></div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="skeleton skeleton-text small mb-1"></div>
                                        <div class="skeleton skeleton-input"></div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="skeleton skeleton-text small mb-1"></div>
                                        <div class="skeleton skeleton-input"></div>
                                    </div>
                                    
                                    <div class="text-center">
                                        <div class="skeleton skeleton-button mx-auto"></div>
                                    </div>
                                }
                                else
                                {
                                    <EditForm Model="@userProfile" OnValidSubmit="SaveProfile" FormName="profile-form"
                                    id="profile-form">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />

                                        <!-- Profile Image Upload -->
                                        <div class="mb-4 text-center">
                                            <div class="mb-3 position-relative d-inline-block">
                                                @if(selectedImageUrl != null || !string.IsNullOrEmpty(userProfile.ImageUrl))
                                                {
                                                    <div class="avatar-container" style="width: 150px; height: 150px; margin: 0 auto; position: relative;">
                                                        <img src="@(selectedImageUrl ?? userProfile.ImageUrl)" alt="Profile Picture"
                                                            class="rounded-circle shadow"
                                                            style="width: 150px; height: 150px; object-fit: cover; border: 2px solid #fff; transition: all 0.3s ease;" />
                                                        
                                                        <div class="avatar-overlay position-absolute top-0 start-0 w-100 h-100 rounded-circle"
                                                            style="background: rgba(0,0,0,0.4); opacity: 0; transition: opacity 0.3s ease; display: flex; align-items: center; justify-content: center; cursor: pointer;">
                                                            <i class="bi bi-camera-fill text-white" style="font-size: 2rem;"></i>
                                                        </div>
                                                        
                                                        <label for="profile-image-upload" class="position-absolute top-0 start-0 w-100 h-100 m-0 cursor-pointer">
                                                            <span class="visually-hidden">Change profile picture</span>
                                                        </label>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="avatar-placeholder d-flex align-items-center justify-content-center rounded-circle shadow bg-light"
                                                        style="width: 150px; height: 150px; margin: 0 auto; border: 2px solid #e0e0e0; cursor: pointer;">
                                                        <i class="bi bi-person" style="font-size: 4rem; color: #adb5bd;"></i>
                                                        
                                                        <label for="profile-image-upload" class="position-absolute top-0 start-0 w-100 h-100 m-0 cursor-pointer">
                                                            <span class="visually-hidden">Upload profile picture</span>
                                                        </label>
                                                    </div>
                                                }
                                                
                                                <InputFile id="profile-image-upload" OnChange="OnInputFileChange"
                                                    accept=".jpg,.jpeg,.png" class="d-none" />
                                            </div>
                                            <small class="text-muted d-block mt-2 mb-3">Click to change your profile photo<br>Supported: JPG, PNG (Max 2MB)</small>
                                            @if (!string.IsNullOrEmpty(fileUploadError))
                                            {
                                                <div class="alert alert-danger py-2 px-3 d-inline-block" style="font-size: 0.875rem;">@fileUploadError</div>
                                            }
                                        </div>
                                        
                                        <style>
                                            .avatar-container:hover .avatar-overlay {
                                                opacity: 1;
                                            }
                                            .cursor-pointer {
                                                cursor: pointer;
                                            }
                                        </style>

                                        <div class="mb-3">
                                            <label class="form-label">Full Name</label>
                                            <InputText class="form-control" @bind-Value="userProfile.UserName" />
                                            <ValidationMessage For="@(() => userProfile.UserName)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Date of Birth</label>
                                            <InputDate class="form-control" @bind-Value="userProfile.DateOfBirth" />
                                            <ValidationMessage For="@(() => userProfile.DateOfBirth)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Phone Number</label>
                                            @if (string.IsNullOrEmpty(userProfile.PhoneNumber))
                                            {
                                                <InputText class="form-control" @bind-Value="userProfile.PhoneNumber" />
                                            }
                                            else
                                            {
                                                <InputText class="form-control" @bind-Value="userProfile.PhoneNumber" disabled />
                                            }
                                            <ValidationMessage For="@(() => userProfile.PhoneNumber)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Email</label>
                                            @if (string.IsNullOrEmpty(userProfile.Email))
                                            {
                                                <InputText type="email" class="form-control" @bind-Value="userProfile.Email" />
                                            }
                                            else
                                            {
                                                <InputText type="email" class="form-control" @bind-Value="userProfile.Email"
                                                    disabled />
                                            }
                                            <ValidationMessage For="@(() => userProfile.Email)" />
                                        </div>

                                        <div class="mb-3">
                                            <label class="form-label">Gender</label>
                                            <InputSelect class="form-select" @bind-Value="genderValue">
                                                <option value="0">Male</option>
                                                <option value="1">Female</option>
                                                <option value="2">Unknown</option>
                                                <option value="3">Other</option>
                                            </InputSelect>
                                            <ValidationMessage For="@(() => genderValue)" />
                                        </div>

                                        <div class="text-center">
                                            <button type="submit" class="btn btn-primary" disabled="@isSavingProfile">
                                                @if (isSavingProfile)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-1" role="status"
                                                        aria-hidden="true"></span>
                                                    <span>Saving...</span>
                                                }
                                                else
                                                {
                                                    <span>Save Changes</span>
                                                }
                                            </button>
                                        </div>
                                    </EditForm>
                                }
                            </div>
                        </div>
                    }
                    else if (activeSection == "password")
                    {
                        <div class="card">
                            <div class="card-header">
                                <h4>Change Password</h4>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(statusMessage))
                                {
                                    <div class="alert @statusAlertClass alert-dismissible fade show" role="alert">
                                        @statusMessage
                                        <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
                                    </div>
                                }

                                @if (isLoading)
                                {
                                    <div class="mb-3">
                                        <div class="skeleton skeleton-text small mb-1"></div>
                                        <div class="skeleton skeleton-input"></div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="skeleton skeleton-text small mb-1"></div>
                                        <div class="skeleton skeleton-input"></div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <div class="skeleton skeleton-text small mb-1"></div>
                                        <div class="skeleton skeleton-input"></div>
                                    </div>
                                    
                                    <div class="text-center">
                                        <div class="skeleton skeleton-button mx-auto"></div>
                                    </div>
                                }
                                else
                                {
                                    <EditForm Model="@changePasswordRequest" OnValidSubmit="ChangePassword">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />

                                        <div class="mb-3">
                                            <label class="form-label">Current Password</label>
                                            <InputText type="password" class="form-control"
                                                @bind-Value="changePasswordRequest.CurrentPassword" />
                                            <ValidationMessage For="@(() => changePasswordRequest.CurrentPassword)" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">New Password</label>
                                            <InputText type="password" class="form-control"
                                                @bind-Value="changePasswordRequest.NewPassword" />
                                            <ValidationMessage For="@(() => changePasswordRequest.NewPassword)" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Confirm New Password</label>
                                            <InputText type="password" class="form-control"
                                                @bind-Value="changePasswordRequest.RepeatNewPassword" />
                                            <ValidationMessage For="@(() => changePasswordRequest.RepeatNewPassword)" />
                                        </div>
                                        <div class="text-center">
                                            <button type="submit" class="btn btn-warning" disabled="@isChangingPassword">
                                                @if (isChangingPassword)
                                                {
                                                    <span class="spinner-border spinner-border-sm me-1" role="status"
                                                        aria-hidden="true"></span>
                                                    <span>Processing...</span>
                                                }
                                                else
                                                {
                                                    <span>Change Password</span>
                                                }
                                            </button>
                                        </div>
                                    </EditForm>
                                }
                            </div>
                        </div>
                    }
                    else if (activeSection == "orders")
                    {
                        <div class="card">
                            <div class="card-header">
                                <h4>Order History</h4>
                            </div>
                            <div class="card-body">
                                @if (isLoading)
                                {
                                    <div class="skeleton-table">
                                        <div class="skeleton skeleton-text mb-3" style="height: 30px;"></div>
                                        
                                        @for (int i = 0; i < 5; i++)
                                        {
                                            <div class="skeleton skeleton-text mb-3" style="height: 40px;"></div>
                                        }
                                    </div>
                                }
                                else if (orders == null)
                                {
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                }
                                else if (!orders.Any())
                                {
                                    <p class="text-center">No orders found.</p>
                                }
                                else
                                {
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Order ID</th>
                                                    <th>Customer</th>
                                                    <th>Payment Status</th>
                                                    <th>Payment Method</th>
                                                    <th>Total</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var order in orders)
                                                {
                                                    <tr>
                                                        <td>@order.OrderId.Substring(0, Math.Min(8, order.OrderId.Length))...</td>
                                                        <td>@order.UserName</td>
                                                        <td>
                                                            <span class="badge @GetStatusBadgeClass(order.PaymentStatus)">
                                                                @order.PaymentStatus
                                                            </span>
                                                        </td>
                                                        <td>@(string.IsNullOrEmpty(order.PaymentMethod) ? "N/A" : order.PaymentMethod)</td>
                                                        <td>@FormatCurrency(order.Total)</td>
                                                        <td>
                                                            <button class="btn btn-sm btn-info"
                                                                @onclick="() => ViewOrderDetails(order.OrderId)">
                                                                Details
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1 class="text-center">Access Denied</h1>
        <p class="text-center">Vui lòng đăng nhập</p>
    </NotAuthorized>
</AuthorizeView>

@if (selectedOrderDetails != null)
{
    <div class="modal fade show" id="orderDetailsModal" style="display: block; background-color: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chi tiết đơn hàng #@selectedOrderDetails.OrderId.Substring(0, 8)...</h5>
                    <button type="button" class="btn-close" @onclick="CloseOrderDetailsModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <p><strong>Customer:</strong> @selectedOrderDetails.CustomerName</p>
                            <p><strong>Phone:</strong> @selectedOrderDetails.PhoneNumber</p>
                            <p><strong>Address:</strong> @selectedOrderDetails.SpecificAddress</p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Payment Status:</strong> 
                                <span class="badge bg-info">@selectedOrderDetails.PaymentStatus</span>
                            </p>
                            <p><strong>Payment Method:</strong> 
                                @(string.IsNullOrEmpty(selectedOrderDetails.PaymentMethod) ? "N/A" : selectedOrderDetails.PaymentMethod)
                            </p>
                            @if (!string.IsNullOrEmpty(selectedOrderDetails.BillId))
                            {
                                <p><strong>Bill ID:</strong> @selectedOrderDetails.BillId.Substring(0, Math.Min(10, selectedOrderDetails.BillId.Length))...</p>
                                <p><strong>Bill Total:</strong> @FormatCurrency(selectedOrderDetails.BillTotal)</p>
                            }
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedOrderDetails.VoucherCode))
                    {
                        <div class="alert alert-info mb-3">
                            <strong>Voucher Applied:</strong> @selectedOrderDetails.VoucherCode
                        </div>
                    }

                    <h6 class="mb-3">Items</h6>
                    <div class="table-responsive">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th style="width: 40%;">Product</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in selectedOrderDetails.OrderDetails)
                                {
                                    <tr>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                                            {
                                                <img src="@item.ImageUrl" alt="Product" class="img-thumbnail" style="width: 50px; height: 50px; object-fit: cover; margin-right: 10px;" />
                                            }
                                            <div>
                                                <span class="fw-bold">@item.ProductName</span>
                                                @if (!string.IsNullOrEmpty(item.VariantName))
                                                {
                                                    <br />
                                                    <small class="text-muted">Variant: @item.VariantName</small>
                                                }
                                                @if (!string.IsNullOrEmpty(item.ColorCode))
                                                {
                                                    <br />
                                                    <small class="text-muted d-flex align-items-center">
                                                        Color: 
                                                        <span class="color-preview ms-1" style="width: 15px; height: 15px; border-radius: 50%; background-color: @item.ColorCode; display: inline-block; margin-right: 5px;"></span>
                                                    </small>
                                                }
                                            </div>
                                        </td>
                                        <td>@FormatCurrency(item.Price)</td>
                                        <td>@item.Quantity</td>
                                        <td>@FormatCurrency(item.Total)</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>Total:</strong></td>
                                    <td><strong>@FormatCurrency(selectedOrderDetails.Total)</strong></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseOrderDetailsModal">Close</button>
                    @if (selectedOrderDetails != null && 
                         selectedOrderDetails.PaymentStatus.ToLower() != "cancelled" && 
                         selectedOrderDetails.PaymentStatus.ToLower() != "completed" &&
                         selectedOrderDetails.PaymentStatus.ToLower() != "delivered")
                    {
                        <button type="button" class="btn btn-danger" @onclick="() => ShowCancelOrderConfirmation(selectedOrderDetails.OrderId)">
                            @if (isCancellingOrder && orderIdBeingCancelled == selectedOrderDetails.OrderId)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Huỷ đơn hàng...</span>
                            }
                            else
                            {
                                <span>Huỷ đơn hàng</span>
                            }
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@if (showCancelConfirmation)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Xác nhận huỷ đơn hàng</h5>
                    <button type="button" class="btn-close" @onclick="CancelConfirmationClose"></button>
                </div>
                <div class="modal-body">
                    <p>Bạn có chắc chắn muốn huỷ đơn hàng này?</p>
                    <p><strong>Lưu ý:</strong> Hành động này không thể hoàn tác.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelConfirmationClose">Không, giữ đơn hàng</button>
                    <button type="button" class="btn btn-danger" @onclick="CancelOrder" disabled="@isCancellingOrder">
                        @if (isCancellingOrder)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Đang huỷ...</span>
                        }
                        else
                        {
                            <span>Có, huỷ đơn hàng</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (isOrderDetailsLoading)
{
    <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-sm">
            <div class="modal-content">
                <div class="modal-body text-center p-4">
                    <div class="spinner-border text-primary mb-3" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p>Loading order details...</p>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private UserProfileResponse userProfile = new();
    private int genderValue;
    private ChangePasswordRequest changePasswordRequest = new();
    private List<OrderHistoryItem> orders = new();
    private bool isLoading = true;
    private bool isPageLoading = false;
    private bool isChangingPassword = false;
    private bool isSavingProfile = false;
    private string activeSection = "profile";
    private const string ProfileSection = "profile";
    private const string PasswordSection = "password";
    private const string OrdersSection = "orders";
    private string statusMessage = string.Empty;
    private string statusAlertClass = "alert-info";

    // File upload properties
    private IBrowserFile? selectedImageFile;
    private string? selectedImageUrl;
    private string fileUploadError = string.Empty;
    private const int MaxFileSize = 2 * 1024 * 1024; // 2MB
    private readonly string[] AllowedExtensions = { ".jpg", ".jpeg", ".png" };

    // Order properties
    private OrderDetailsResponse? selectedOrderDetails;
    private bool isOrderDetailsLoading = false;
    private bool showCancelConfirmation = false;
    private string orderIdToCancel = string.Empty;
    private bool isCancellingOrder = false;
    private string orderIdBeingCancelled = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        isPageLoading = true;
        
        try 
        {
            if (await LocalStorage.GetItemAsStringAsync("accessToken") != null)
            {
                var userProfileResponse = await
                Http.GetFromJsonAsync<UserProfileResponse>("https://localhost:7222/api/customers/profile");
                userProfile = userProfileResponse;

                // Parse date of birth if it's available as a string in the response
                if (!string.IsNullOrEmpty(userProfileResponse.DateOfBirth.ToString()) &&
                DateTime.TryParse(userProfileResponse.DateOfBirth.ToString(), out DateTime dob))
                {
                    userProfile.DateOfBirth = dob;
                }

                // Convert Gender string to int for the dropdown
                genderValue = ConvertGenderToInt(userProfile.Gender);
            }

            // Load orders
            await LoadOrders();
        }
        finally
        {
            // Add a small delay for visual feedback
            await Task.Delay(500);
            isLoading = false;
            isPageLoading = false;
        }
    }

    private void SetActiveSection(string section)
    {
        if (activeSection == section) return;
        
        activeSection = section;
        isLoading = true;
        
        // Simulate section loading
        _ = Task.Run(async () => {
            if (section == OrdersSection)
            {
                await LoadOrders();
            }
            
            await Task.Delay(500);
            isLoading = false;
            StateHasChanged();
        });
    }

    private async Task LoadOrders()
    {
        isLoading = true;
        try
        {
            var response = await Http.GetFromJsonAsync<List<OrderHistoryItem>>("https://localhost:7222/api/orders/history");
            if (response != null)
            {
                orders = response; // Simply assign the response to orders
                Console.WriteLine($"Loaded {orders.Count} orders with details");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
            ShowErrorMessage("Failed to load orders. Please try again later.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private class UpdateProfileResquest
    {
        public string UserName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public int Gender { get; set; }
        public DateTime? DateOfBirth { get; set; } = null;
    }

    private async Task SaveProfile()
    {
        isSavingProfile = true;
        try
        {
            // Create form data content
            var formData = new MultipartFormDataContent();
            formData.Add(new StringContent(userProfile.UserName ?? string.Empty), "UserName");
            formData.Add(new StringContent(userProfile.PhoneNumber ?? string.Empty), "PhoneNumber");

            if (userProfile.DateOfBirth.HasValue)
            {
                formData.Add(new StringContent(userProfile.DateOfBirth.Value.ToString("yyyy-MM-dd")), "DateOfBirth");
            }
            else
            {
                formData.Add(new StringContent(string.Empty), "DateOfBirth");
            }

            formData.Add(new StringContent(genderValue.ToString()), "Gender");

            // Add the profile image if selected
            if (selectedImageFile != null)
            {
                Console.WriteLine("Preparing to upload profile image to API...");
                
                // Resize and compress image if needed for larger images
                var imageContent = await ProcessImageForUpload(selectedImageFile);
                
                // Add to form data with the correct field name expected by the API
                formData.Add(imageContent, "ImageFile", selectedImageFile.Name);
                
                Console.WriteLine($"Image added to form data: {selectedImageFile.Name}");
            }

            Console.WriteLine("Sending profile update request to API...");
            var response = await Http.PutAsync("https://localhost:7222/api/customers/profile", formData);
            Console.WriteLine($"API response status: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                ShowSuccessMessage("Profile updated successfully!");

                // Reset the selected file after successful upload
                selectedImageFile = null;
                selectedImageUrl = null;

                // Refresh the profile data
                await RefreshProfileData();
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"API error response: {responseContent}");
                
                try
                {
                    var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                    ShowErrorMessage(error?.Message ?? "Failed to update profile. Please try again.");
                }
                catch
                {
                    ShowErrorMessage($"Failed to update profile. Server responded with {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating profile: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            ShowErrorMessage("An error occurred while updating your profile. Please try again later.");
        }
        finally
        {
            isSavingProfile = false;
        }
    }

    private async Task RefreshProfileData()
    {
        try
        {
            var userProfileResponse = await
            Http.GetFromJsonAsync<UserProfileResponse>("https://localhost:7222/api/customers/profile");
            if (userProfileResponse != null)
            {
                userProfile = userProfileResponse;

                // Parse date of birth if it's available as a string in the response
                if (!string.IsNullOrEmpty(userProfileResponse.DateOfBirth.ToString()) &&
                DateTime.TryParse(userProfileResponse.DateOfBirth.ToString(), out DateTime dob))
                {
                    userProfile.DateOfBirth = dob;
                }

                // Convert Gender string to int for the dropdown
                genderValue = ConvertGenderToInt(userProfile.Gender);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing profile data: {ex.Message}");
        }
    }

    private async Task ChangePassword()
    {
        isChangingPassword = true;
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7222/api/customers/change-password",
            changePasswordRequest);

            if (response.IsSuccessStatusCode)
            {
                // Reset form after successful password change
                changePasswordRequest = new ChangePasswordRequest();
                ShowSuccessMessage("Password changed successfully!");
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                ShowErrorMessage(error?.Message ?? "Failed to change password. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing password: {ex.Message}");
            ShowErrorMessage("An error occurred while changing your password. Please try again later.");
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    private async Task ViewOrderDetails(string orderId)
    {
        isOrderDetailsLoading = true;
        
        try
        {
            // Find the order in our existing list
            var order = orders.FirstOrDefault(o => o.OrderId == orderId);
            if (order != null)
            {
                selectedOrderDetails = new OrderDetailsResponse
                {
                    OrderId = order.OrderId,
                    CustomerName = order.UserName,
                    PhoneNumber = order.PhoneNumber,
                    SpecificAddress = order.SpecificAddress,
                    OrderStatus = "N/A", // This field doesn't exist in the response
                    PaymentStatus = order.PaymentStatus,
                    PaymentMethod = order.PaymentMethod,
                    BillId = order.BillId,
                    BillTotal = order.BillTotal,
                    VoucherCode = order.VoucherCode,
                    Total = order.Total,
                    OrderDetails = order.OrderDetails
                };
            }
            else
            {
                // Fallback to API call if the order is not found in our list
                var response = await Http.GetFromJsonAsync<OrderHistoryItem>($"https://localhost:7222/api/orders/detail/{orderId}");
                if (response != null)
                {
                    selectedOrderDetails = new OrderDetailsResponse
                    {
                        OrderId = response.OrderId,
                        CustomerName = response.UserName,
                        PhoneNumber = response.PhoneNumber,
                        SpecificAddress = response.SpecificAddress,
                        OrderStatus = "N/A", // This field doesn't exist in the response
                        PaymentStatus = response.PaymentStatus,
                        PaymentMethod = response.PaymentMethod,
                        BillId = response.BillId,
                        BillTotal = response.BillTotal,
                        VoucherCode = response.VoucherCode,
                        Total = response.Total,
                        OrderDetails = response.OrderDetails
                    };
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading order details: {ex.Message}");
            ShowErrorMessage("Failed to load order details. Please try again later.");
        }
        finally
        {
            isOrderDetailsLoading = false;
        }
    }

    private void CloseOrderDetailsModal()
    {
        selectedOrderDetails = null;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "completed" or "paid" => "bg-success",
            "processing" or "pending" => "bg-warning",
            "cancelled" or "failed" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private void ShowSuccessMessage(string message)
    {
        statusMessage = message;
        statusAlertClass = "alert-success";
    }

    private void ShowErrorMessage(string message)
    {
        statusMessage = message;
        statusAlertClass = "alert-danger";
    }

    private void ClearStatusMessage()
    {
        statusMessage = string.Empty;
    }

    private int ConvertGenderToInt(string gender)
    {
        // Default to "Unknown" (2) if gender is null or empty
        if (string.IsNullOrEmpty(gender))
            return 2;

        // If gender is already a number (stored as string), parse it
        if (int.TryParse(gender, out int genderValue))
            return genderValue;

        // Handle text-based gender values
        return gender.ToLower() switch
        {
            "male" => 0,
            "female" => 1,
            "other" => 3,
            _ => 2 // Unknown
        };
    }

    private class UserProfileResponse
    {
        public string UserId { get; set; } = string.Empty;

        [Required(ErrorMessage = "Full name is required")]
        [StringLength(100, ErrorMessage = "Full name cannot exceed 100 characters")]
        public string UserName { get; set; } = string.Empty;

        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime? DateOfBirth { get; set; }
        public string ImageUrl { get; set; } = string.Empty;

        [Required(ErrorMessage = "Gender is required")]
        public string Gender { get; set; } = string.Empty;

        [Phone(ErrorMessage = "Invalid phone number format")]
        public string PhoneNumber { get; set; } = string.Empty;

        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        public string CustomerType { get; set; } = string.Empty;
        public string UserStatus { get; set; } = string.Empty;
    }

    private class PasswordChangeModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private class ChangePasswordRequest
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "New password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long", MinimumLength = 6)]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match")]
        public string RepeatNewPassword { get; set; } = string.Empty;
    }

    private class Order
    {
        public string OrderId { get; set; } = string.Empty;
        public DateTime OrderDate { get; set; } = DateTime.Now; // Default to current date since it's not in response
        public string Status { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
        public string PaymentStatus { get; set; } = string.Empty;
        public string PaymentMethod { get; set; } = string.Empty;
        public string BillId { get; set; } = string.Empty;
        public decimal BillTotal { get; set; }
        public List<OrderDetail> OrderDetails { get; set; } = new List<OrderDetail>();
    }

    private class OrderDetail
    {
        public string OrderDetailId { get; set; } = string.Empty;
        public string ProductId { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public string VariantName { get; set; } = string.Empty;
        public string ColorCode { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public string ImageUrl { get; set; } = string.Empty;
        public decimal Total { get; set; }
    }

    // Update the OrderDetailsResponse class to match the necessary fields
    private class OrderDetailsResponse
    {
        public string OrderId { get; set; } = string.Empty;
        public string CustomerName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string SpecificAddress { get; set; } = string.Empty;
        public string OrderStatus { get; set; } = string.Empty;
        public string PaymentStatus { get; set; } = string.Empty;
        public string PaymentMethod { get; set; } = string.Empty;
        public string BillId { get; set; } = string.Empty;
        public decimal BillTotal { get; set; }
        public string? VoucherCode { get; set; }
        public decimal Total { get; set; }
        public List<OrderDetail> OrderDetails { get; set; } = new List<OrderDetail>();
    }

    // Class to match the response format from the history endpoint
    private class OrderHistoryItem
    {
        public string CustomerId { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string SpecificAddress { get; set; } = string.Empty;
        public decimal Total { get; set; }
        public string PaymentStatus { get; set; } = string.Empty;
        public string PaymentMethod { get; set; } = string.Empty;
        public string? VoucherCode { get; set; }
        public string BillId { get; set; } = string.Empty;
        public decimal BillTotal { get; set; }
        public string OrderId { get; set; } = string.Empty;
        public List<OrderDetail> OrderDetails { get; set; } = new List<OrderDetail>();
    }

    private class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        fileUploadError = string.Empty;
        selectedImageFile = null;
        selectedImageUrl = null;

        try
        {
            var file = e.File;

            // Validate file size
            if (file.Size > MaxFileSize)
            {
                fileUploadError = "File size exceeds the 2MB limit.";
                return;
            }

            // Validate file extension
            var extension = Path.GetExtension(file.Name).ToLowerInvariant();
            if (!AllowedExtensions.Contains(extension))
            {
                fileUploadError = "Invalid file type. Only JPG and PNG files are allowed.";
                return;
            }

            // Create a data URL for preview
            var buffer = new byte[file.Size];
            await file.OpenReadStream(MaxFileSize).ReadAsync(buffer);
            var imageType = file.ContentType;
            selectedImageUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffer)}";

            // Store the file for upload
            selectedImageFile = file;
            Console.WriteLine($"File selected: {file.Name}, Size: {file.Size} bytes, Type: {file.ContentType}");
        }
        catch (Exception ex)
        {
            fileUploadError = "An error occurred while processing the file.";
            Console.WriteLine($"File upload error: {ex.Message}");
        }
    }

    private async Task<StreamContent> ProcessImageForUpload(IBrowserFile file)
    {
        // For images below 1MB, just use them directly
        if (file.Size < 1024 * 1024)
        {
            var fileContent = new StreamContent(file.OpenReadStream(MaxFileSize));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            return fileContent;
        }
        
        // For larger images, we'll resize to optimize
        try
        {
            // Create a memory stream to hold the resized image
            using MemoryStream originalStream = new MemoryStream();
            using MemoryStream resizedStream = new MemoryStream();
            
            // Copy the original file to memory
            await file.OpenReadStream(MaxFileSize).CopyToAsync(originalStream);
            originalStream.Position = 0;
            
            // We'll use the original stream approach instead of resizing
            // You can add resizing code here if needed in the future
            
            // Create a stream content from the memory stream
            var fileContent = new StreamContent(new MemoryStream(originalStream.ToArray()));
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            
            return fileContent;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing image: {ex.Message}");
            // Fallback to direct upload if processing fails
            var fallbackContent = new StreamContent(file.OpenReadStream(MaxFileSize));
            fallbackContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType);
            return fallbackContent;
        }
    }

    // Format currency as VND
    private string FormatCurrency(decimal amount)
    {
        // Format as Vietnamese Dong
        return String.Format("{0:#,##0} VNĐ", amount);
    }

    private void ShowCancelOrderConfirmation(string orderId)
    {
        orderIdToCancel = orderId;
        showCancelConfirmation = true;
    }
    
    private void CancelConfirmationClose()
    {
        showCancelConfirmation = false;
        orderIdToCancel = string.Empty;
    }
    
    private async Task CancelOrder()
    {
        if (string.IsNullOrEmpty(orderIdToCancel)) return;
        
        isCancellingOrder = true;
        orderIdBeingCancelled = orderIdToCancel;
        
        try
        {
            var response = await Http.PostAsync($"https://localhost:7222/api/orders/cancel/{orderIdToCancel}", null);
            
            if (response.IsSuccessStatusCode)
            {
                // Close the confirmation modal
                showCancelConfirmation = false;
                
                // Update the order status in the UI
                var order = orders.FirstOrDefault(o => o.OrderId == orderIdToCancel);
                if (order != null)
                {
                    order.PaymentStatus = "Cancelled";
                    
                    // Also update the selected order details if it's the same order
                    if (selectedOrderDetails != null && selectedOrderDetails.OrderId == orderIdToCancel)
                    {
                        selectedOrderDetails.PaymentStatus = "Cancelled";
                    }
                }
                
                ShowSuccessMessage("Đơn hàng đã được huỷ thành công");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error cancelling order: {errorContent}");
                ShowErrorMessage("Không thể huỷ đơn hàng. Vui lòng thử lại sau.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception cancelling order: {ex.Message}");
            ShowErrorMessage("Đã xảy ra lỗi khi huỷ đơn hàng. Vui lòng thử lại sau.");
        }
        finally
        {
            isCancellingOrder = false;
            orderIdBeingCancelled = string.Empty;
            orderIdToCancel = string.Empty;
        }
    }
}