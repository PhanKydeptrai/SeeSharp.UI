@page "/userprofile"
@using Blazored.LocalStorage
@using SeeSharp.UI.Models
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.ComponentModel

<PageTitle>User Profile</PageTitle>
<AuthorizeView Context="authContext">
    <Authorized>
        <div class="container-fluid mt-4" style="min-height: 85vh; padding-bottom: 50px;">
            <div class="row">
                <!-- Left Sidebar Menu -->
                <div class="col-md-3">
                    <div class="card">
                        <div class="card-body">
                            <div class="text-center mb-4">
                                <img src="@userProfile.ImageUrl" alt="Profile Picture" class="rounded-circle"
                                style="width: 100px; height: 100px; object-fit: cover;" />
                                <h5 class="mt-2">@userProfile.UserName</h5>
                            </div>
                            <div class="list-group">
                                <button class="list-group-item list-group-item-action @(activeSection == "profile")"
                                @onclick="() => SetActiveSection(ProfileSection)">
                                    <i class="bi bi-person me-2"></i>Profile Information
                                </button>
                                <button class="list-group-item list-group-item-action @(activeSection == "password")"
                                @onclick="() => SetActiveSection(PasswordSection)">
                                    <i class="bi bi-key me-2"></i>Change Password
                                </button>
                                <button class="list-group-item list-group-item-action @(activeSection == "orders")"
                                @onclick="() => SetActiveSection(OrdersSection)">
                                    <i class="bi bi-bag me-2"></i>Order History
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Main Content Area -->
                <div class="col-md-9">
                    @if (activeSection == "profile")
                    {
                        <div class="card">
                            <div class="card-header">
                                <h4>Profile Information</h4>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(statusMessage))
                                {
                                    <div class="alert @statusAlertClass alert-dismissible fade show" role="alert">
                                        @statusMessage
                                        <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
                                    </div>
                                }

                                <EditForm Model="@userProfile" OnValidSubmit="SaveProfile" FormName="profile-form" id="profile-form">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-3">
                                        <label class="form-label">Full Name</label>
                                        <InputText class="form-control" @bind-Value="userProfile.UserName" />
                                        <ValidationMessage For="@(() => userProfile.UserName)" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Date of Birth</label>
                                        <InputDate class="form-control" @bind-Value="userProfile.DateOfBirth" />
                                        <ValidationMessage For="@(() => userProfile.DateOfBirth)" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Phone Number</label>
                                        @if (string.IsNullOrEmpty(userProfile.PhoneNumber))
                                        {
                                            <InputText class="form-control" @bind-Value="userProfile.PhoneNumber" />
                                        }
                                        else
                                        {
                                            <InputText class="form-control" @bind-Value="userProfile.PhoneNumber" disabled />
                                        }
                                        <ValidationMessage For="@(() => userProfile.PhoneNumber)" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Email</label>
                                        @if (string.IsNullOrEmpty(userProfile.Email))
                                        {
                                            <InputText type="email" class="form-control" @bind-Value="userProfile.Email" />
                                        }
                                        else
                                        {
                                            <InputText type="email" class="form-control" @bind-Value="userProfile.Email" disabled />
                                        }
                                        <ValidationMessage For="@(() => userProfile.Email)" />
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Gender</label>
                                        <InputSelect class="form-select" @bind-Value="genderValue">
                                            <option value="0">Male</option>
                                            <option value="1">Female</option>
                                            <option value="2">Unknown</option>
                                            <option value="3">Other</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => genderValue)" />
                                    </div>

                                    <div class="text-center">
                                        <button type="submit" class="btn btn-primary" disabled="@isSavingProfile">
                                            @if (isSavingProfile)
                                            {
                                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                                <span>Saving...</span>
                                            }
                                            else
                                            {
                                                <span>Save Changes</span>
                                            }
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                    else if (activeSection == "password")
                    {
                        <div class="card">
                            <div class="card-header">
                                <h4>Change Password</h4>
                            </div>
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(statusMessage))
                                {
                                    <div class="alert @statusAlertClass alert-dismissible fade show" role="alert">
                                        @statusMessage
                                        <button type="button" class="btn-close" @onclick="ClearStatusMessage"></button>
                                    </div>
                                }

                                <EditForm Model="@changePasswordRequest" OnValidSubmit="ChangePassword">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-3">
                                        <label class="form-label">Current Password</label>
                                        <InputText type="password" class="form-control" @bind-Value="changePasswordRequest.CurrentPassword" />
                                        <ValidationMessage For="@(() => changePasswordRequest.CurrentPassword)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">New Password</label>
                                        <InputText type="password" class="form-control" @bind-Value="changePasswordRequest.NewPassword" />
                                        <ValidationMessage For="@(() => changePasswordRequest.NewPassword)" />
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Confirm New Password</label>
                                        <InputText type="password" class="form-control" @bind-Value="changePasswordRequest.RepeatNewPassword" />
                                        <ValidationMessage For="@(() => changePasswordRequest.RepeatNewPassword)" />
                                    </div>
                                    <div class="text-center">
                                        <button type="submit" class="btn btn-warning" disabled="@isChangingPassword">
                                            @if (isChangingPassword)
                                            {
                                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                                <span>Processing...</span>
                                            }
                                            else
                                            {
                                                <span>Change Password</span>
                                            }
                                        </button>
                                    </div>
                                </EditForm>
                            </div>
                        </div>
                    }
                    else if (activeSection == "orders")
                    {
                        <div class="card">
                            <div class="card-header">
                                <h4>Order History</h4>
                            </div>
                            <div class="card-body">
                                @if (orders == null)
                                {
                                    <div class="text-center">
                                        <div class="spinner-border" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                    </div>
                                }
                                else if (!orders.Any())
                                {
                                    <p class="text-center">No orders found.</p>
                                }
                                else
                                {
                                    <div class="table-responsive">
                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>Order ID</th>
                                                    <th>Date</th>
                                                    <th>Status</th>
                                                    <th>Total</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var order in orders)
                                                {
                                                    <tr>
                                                        <td>@order.OrderId</td>
                                                        <td>@order.OrderDate.ToShortDateString()</td>
                                                        <td>
                                                            <span class="badge @GetStatusBadgeClass(order.Status)">
                                                                @order.Status
                                                            </span>
                                                        </td>
                                                        <td>@order.TotalAmount.ToString("C")</td>
                                                        <td>
                                                            <button class="btn btn-sm btn-info"
                                                            @onclick="() => ViewOrderDetails(order.OrderId)">
                                                                Details
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1 class="text-center">Access Denied</h1>
        <p class="text-center">Vui lòng đăng nhập</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private UserProfileResponse userProfile = new();
    private int genderValue;
    private ChangePasswordRequest changePasswordRequest = new();
    private List<Order> orders = new();
    private bool isLoading = true;
    private bool isChangingPassword = false;
    private bool isSavingProfile = false;
    private string activeSection = "profile";
    private const string ProfileSection = "profile";
    private const string PasswordSection = "password";
    private const string OrdersSection = "orders";
    private string statusMessage = string.Empty;
    private string statusAlertClass = "alert-info";


    protected override async Task OnInitializedAsync()
    {

        if (await LocalStorage.GetItemAsStringAsync("accessToken") != null)
        {
            var userProfileResponse = await
            Http.GetFromJsonAsync<UserProfileResponse>("https://localhost:7222/api/customers/profile");
            userProfile = userProfileResponse;

            // Parse date of birth if it's available as a string in the response
            if (!string.IsNullOrEmpty(userProfileResponse.DateOfBirth.ToString()) && 
                DateTime.TryParse(userProfileResponse.DateOfBirth.ToString(), out DateTime dob))
            {
                userProfile.DateOfBirth = dob;
            }
            
            // Convert Gender string to int for the dropdown
            genderValue = ConvertGenderToInt(userProfile.Gender);
        }

        // Load orders
        @* await LoadOrders(); *@
    }

    private void SetActiveSection(string section)
    {
        activeSection = section;
    }

    private async Task LoadOrders()
    {
        isLoading = true;
        try
        {

        }
        finally
        {
            isLoading = false;
        }
    }

    private class UpdateProfileResquest
    {
        public string UserName { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public int Gender { get; set; }
        public DateTime? DateOfBirth { get; set; } = null;
    }

    private async Task SaveProfile()
    {
        isSavingProfile = true;
        try
        {
            // Create form data content
            var formData = new MultipartFormDataContent();
            formData.Add(new StringContent(userProfile.UserName ?? string.Empty), "UserName");
            formData.Add(new StringContent(userProfile.PhoneNumber ?? string.Empty), "PhoneNumber");
            
            if (userProfile.DateOfBirth.HasValue)
            {
                formData.Add(new StringContent(userProfile.DateOfBirth.Value.ToString("yyyy-MM-dd")), "DateOfBirth");
            }
            else
            {
                formData.Add(new StringContent(string.Empty), "DateOfBirth");
            }
            
            formData.Add(new StringContent(genderValue.ToString()), "Gender");

            // Here you could add file upload handling if needed
            // if (profileImage != null)
            // {
            //     formData.Add(new StreamContent(profileImage.OpenReadStream()), "ProfileImage", profileImage.Name);
            // }

            var response = await Http.PutAsync("https://localhost:7222/api/customers/profile", formData);
            
            if (response.IsSuccessStatusCode)
            {
                ShowSuccessMessage("Profile updated successfully!");
                
                // Optionally refresh the profile data
                await RefreshProfileData();
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                ShowErrorMessage(error?.Message ?? "Failed to update profile. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating profile: {ex.Message}");
            ShowErrorMessage("An error occurred while updating your profile. Please try again later.");
        }
        finally
        {
            isSavingProfile = false;
        }
    }

    private async Task RefreshProfileData()
    {
        try 
        {
            var userProfileResponse = await Http.GetFromJsonAsync<UserProfileResponse>("https://localhost:7222/api/customers/profile");
            if (userProfileResponse != null)
            {
                userProfile = userProfileResponse;
                
                // Parse date of birth if it's available as a string in the response
                if (!string.IsNullOrEmpty(userProfileResponse.DateOfBirth.ToString()) && 
                    DateTime.TryParse(userProfileResponse.DateOfBirth.ToString(), out DateTime dob))
                {
                    userProfile.DateOfBirth = dob;
                }
                
                // Convert Gender string to int for the dropdown
                genderValue = ConvertGenderToInt(userProfile.Gender);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing profile data: {ex.Message}");
        }
    }

    private async Task ChangePassword()
    {
        isChangingPassword = true;
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7222/api/customers/change-password", changePasswordRequest);
            
            if (response.IsSuccessStatusCode)
            {
                // Reset form after successful password change
                changePasswordRequest = new ChangePasswordRequest();
                ShowSuccessMessage("Password changed successfully!");
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                ShowErrorMessage(error?.Message ?? "Failed to change password. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error changing password: {ex.Message}");
            ShowErrorMessage("An error occurred while changing your password. Please try again later.");
        }
        finally
        {
            isChangingPassword = false;
        }
    }

    private void ViewOrderDetails(string orderId)
    {
        // TODO: Navigate to order details page
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "completed" => "bg-success",
            "processing" => "bg-warning",
            "cancelled" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private void ShowSuccessMessage(string message)
    {
        statusMessage = message;
        statusAlertClass = "alert-success";
    }

    private void ShowErrorMessage(string message)
    {
        statusMessage = message;
        statusAlertClass = "alert-danger";
    }

    private void ClearStatusMessage()
    {
        statusMessage = string.Empty;
    }

    private int ConvertGenderToInt(string gender)
    {
        // Default to "Unknown" (2) if gender is null or empty
        if (string.IsNullOrEmpty(gender))
            return 2;
            
        // If gender is already a number (stored as string), parse it
        if (int.TryParse(gender, out int genderValue))
            return genderValue;
            
        // Handle text-based gender values
        return gender.ToLower() switch
        {
            "male" => 0,
            "female" => 1,
            "other" => 3,
            _ => 2 // Unknown
        };
    }

    private class UserProfileResponse
    {
        public string UserId { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Full name is required")]
        [StringLength(100, ErrorMessage = "Full name cannot exceed 100 characters")]
        public string UserName { get; set; } = string.Empty;
        
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime? DateOfBirth { get; set; }
        public string ImageUrl { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Gender is required")]
        public string Gender { get; set; } = string.Empty;
        
        [Phone(ErrorMessage = "Invalid phone number format")]
        public string PhoneNumber { get; set; } = string.Empty;
        
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;
        
        public string CustomerType { get; set; } = string.Empty;
        public string UserStatus { get; set; } = string.Empty;
    }

    private class PasswordChangeModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private class ChangePasswordRequest
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "New password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long", MinimumLength = 6)]
        public string NewPassword { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Confirm password is required")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match")]
        public string RepeatNewPassword { get; set; } = string.Empty;
    }

    private class Order
    {
        public string OrderId { get; set; } = string.Empty;
        public DateTime OrderDate { get; set; }
        public string Status { get; set; } = string.Empty;
        public decimal TotalAmount { get; set; }
    }

    private class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}