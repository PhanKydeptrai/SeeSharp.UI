@page "/register"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager
<PageTitle>Đăng ký - Kính Thời Trang</PageTitle>

<div class="register-container">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4 breadcrumb-wrapper">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
            <li class="breadcrumb-item active" aria-current="page">Đăng ký</li>
        </ol>
    </nav>

    <div class="row justify-content-center">
        <div class="col-md-10 col-lg-9">
            <div class="register-card">
                <div class="row g-0">
                    <div class="col-lg-5 d-none d-lg-block position-relative">
                        <div class="register-banner">
                            <div class="overlay"></div>
                            <div class="banner-content">
                                <i class="bi bi-person-plus-fill display-1 mb-3 text-glow"></i>
                                <h3 class="fw-bold mb-3">Tham gia cùng chúng tôi</h3>
                                <p class="mb-4">Trở thành thành viên để nhận nhiều ưu đãi và cập nhật xu hướng mới nhất</p>
                                <a href="/login" class="btn btn-outline-light btn-login-alt rounded-pill px-4">
                                    <span>Đã có tài khoản? Đăng nhập</span>
                                    <i class="bi bi-arrow-right-short ms-1"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-7">
                        <div class="register-form-container">
                            <div class="text-center mb-4 d-lg-none">
                                <i class="bi bi-person-plus-fill display-5 text-primary"></i>
                            </div>
                            <h2 class="register-title text-center">Đăng ký tài khoản</h2>

                            <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" class="needs-validation">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger small mb-3" />

                                <div class="form-floating input-wrapper">
                                    <InputText id="lastName" class="form-control" @bind-Value="registerModel.UserName" placeholder="Tên" />
                                    <label for="lastName">
                                        <i class="bi bi-person-fill me-2 text-primary"></i>Tên
                                    </label>
                                    <ValidationMessage For="@(() => registerModel.UserName)" class="text-danger small" />
                                </div>

                                <div class="form-floating input-wrapper">
                                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" placeholder="Email" />
                                    <label for="email">
                                        <i class="bi bi-envelope-fill me-2 text-primary"></i>Email
                                    </label>
                                    <ValidationMessage For="@(() => registerModel.Email)" class="text-danger small" />
                                </div>

                                <div class="form-floating input-wrapper">
                                    <div class="input-group">
                                        <InputText type="@(showPassword ? "text" : "password")" id="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Mật khẩu" />
                                        <button type="button" class="password-toggle" @onclick="TogglePasswordVisibility">
                                            <i class="bi @(showPassword ? "bi-eye-slash-fill" : "bi-eye-fill")"></i>
                                        </button>
                                    </div>
                                    <div class="password-requirements small text-muted mt-2">
                                        <div><i class="bi bi-check-circle me-1"></i> Ít nhất 8 ký tự</div>
                                        <div><i class="bi bi-check-circle me-1"></i> Chữ hoa và chữ thường</div>
                                        <div><i class="bi bi-check-circle me-1"></i> Ít nhất 1 số và 1 ký tự đặc biệt</div>
                                    </div>
                                    <ValidationMessage For="@(() => registerModel.Password)" class="text-danger small" />
                                </div>

                                <div class="form-check custom-checkbox mb-4 mt-2">
                                    <InputCheckbox id="agreeTerms" class="form-check-input" @bind-Value="registerModel.AgreeToTerms" />
                                    <label class="form-check-label" for="agreeTerms">
                                        Tôi đồng ý với <a href="/terms" class="terms-link">Điều khoản sử dụng</a> và <a href="/privacy" class="terms-link">Chính sách bảo mật</a>
                                    </label>
                                    <ValidationMessage For="@(() => registerModel.AgreeToTerms)" class="d-block text-danger small" />
                                </div>

                                <button type="submit" class="btn-register">
                                    @if (isRegistering)
                                    {
                                        <div class="d-flex align-items-center justify-content-center">
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <span>Đang đăng ký...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <span>Đăng ký ngay</span>
                                        <i class="bi bi-arrow-right-circle ms-2"></i>
                                    }
                                </button>

                                <div class="divider">
                                    <span>hoặc đăng ký với</span>
                                </div>

                                <div class="social-login">
                                    <button type="button" class="btn-social btn-facebook" @onclick="RegisterWithFacebook">
                                        <i class="bi bi-facebook"></i>
                                        <span>Facebook</span>
                                    </button>
                                    <button type="button" class="btn-social btn-google" @onclick="RegisterWithGoogle">
                                        <i class="bi bi-google"></i>
                                        <span>Google</span>
                                    </button>
                                </div>
                            </EditForm>

                            <div class="text-center mt-4 d-lg-none">
                                <p class="mb-0 login-link">Đã có tài khoản? <a href="/login">Đăng nhập</a></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .register-container {
    max-width: 1200px;
    margin: 2rem auto;
    padding: 0 1rem;
    }

    .breadcrumb-wrapper {
    margin-bottom: 2rem;
    }

    .breadcrumb-item a {
    color: #666;
    text-decoration: none;
    transition: color 0.3s;
    }

    .breadcrumb-item a:hover {
    color: var(--bs-primary);
    }

    .register-card {
    border: none;
    border-radius: 16px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s, box-shadow 0.3s;
    }

    .register-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.15);
    }

    .register-banner {
    height: 100%;
    background-image: url('https://images.unsplash.com/photo-1577803645773-f96470509666?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80');
    background-size: cover;
    background-position: center;
    position: relative;
    }

    .overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(0,123,255,0.85) 0%, rgba(13,110,253,0.75) 100%);
    }

    .banner-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
    color: white;
    width: 90%;
    z-index: 1;
    }

    .text-glow {
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
    }

    .btn-login-alt {
    border: 2px solid white;
    transition: all 0.3s;
    font-weight: 500;
    }

    .btn-login-alt:hover {
    background-color: white;
    color: var(--bs-primary);
    transform: translateY(-3px);
    }

    .register-form-container {
    padding: 3rem 2.5rem;
    }

    .register-title {
    font-weight: 700;
    margin-bottom: 2rem;
    color: #333;
    position: relative;
    display: inline-block;
    left: 50%;
    transform: translateX(-50%);
    }

    .register-title:after {
    content: '';
    position: absolute;
    width: 50%;
    height: 3px;
    background: var(--bs-primary);
    bottom: -10px;
    left: 25%;
    border-radius: 2px;
    }

    .input-wrapper {
    margin-bottom: 1.5rem;
    }

    .form-control {
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    padding: 1.5rem 1rem;
    background-color: #f8f9fa;
    transition: all 0.3s;
    }

    .form-control:focus {
    box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
    border-color: #86b7fe;
    background-color: #fff;
    }

    .input-group .form-control {
    border-right: none;
    border-top-right-radius: 0;
    border-bottom-right-radius: 0;
    }

    .input-group {
    position: relative;
    border-radius: 10px;
    overflow: hidden;
    }

    .password-toggle {
    background-color: #f8f9fa;
    border: 1px solid #e0e0e0;
    border-left: none;
    border-radius: 0 10px 10px 0;
    padding: 0 1rem;
    color: #6c757d;
    cursor: pointer;
    transition: all 0.3s;
    }

    .password-toggle:hover {
    color: var(--bs-primary);
    }

    .password-requirements {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    }

    .password-requirements > div {
    flex: 1 0 30%;
    font-size: 0.8rem;
    }

    .custom-checkbox .form-check-input {
    width: 1.1em;
    height: 1.1em;
    border-radius: 4px;
    border: 1px solid #adb5bd;
    }

    .custom-checkbox .form-check-input:checked {
    background-color: var(--bs-primary);
    border-color: var(--bs-primary);
    }

    .custom-checkbox .form-check-label {
    font-size: 0.9rem;
    color: #555;
    }

    .terms-link {
    color: var(--bs-primary);
    text-decoration: none;
    font-weight: 600;
    transition: all 0.3s;
    }

    .terms-link:hover {
    text-decoration: underline;
    }

    .btn-register {
    width: 100%;
    padding: 0.8rem;
    border-radius: 10px;
    background: linear-gradient(45deg, #0d6efd, #0a58ca);
    color: white;
    font-weight: 600;
    border: none;
    margin-bottom: 1.5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all 0.3s;
    position: relative;
    overflow: hidden;
    z-index: 1;
    }

    .btn-register:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(45deg, #0a58ca, #0d6efd);
    transition: all 0.4s;
    z-index: -1;
    }

    .btn-register:hover:before {
    left: 0;
    }

    .btn-register:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 15px rgba(13, 110, 253, 0.4);
    }

    .divider {
    display: flex;
    align-items: center;
    text-align: center;
    margin: 1.5rem 0;
    color: #6c757d;
    }

    .divider::before,
    .divider::after {
    content: '';
    flex: 1;
    border-bottom: 1px solid #e0e0e0;
    }

    .divider span {
    padding: 0 1rem;
    font-size: 0.9rem;
    background: #fff;
    }

    .social-login {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
    }

    .btn-social {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    padding: 0.7rem;
    border-radius: 10px;
    font-weight: 500;
    transition: all 0.3s;
    border: none;
    color: white;
    }

    .btn-facebook {
    background-color: #3b5998;
    }

    .btn-google {
    background-color: #dd4b39;
    }

    .btn-social:hover {
    transform: translateY(-3px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
    }

    .login-link {
    font-size: 0.95rem;
    color: #555;
    }

    .login-link a {
    color: var(--bs-primary);
    font-weight: 600;
    text-decoration: none;
    transition: all 0.3s;
    }

    .login-link a:hover {
    text-decoration: underline;
    }

    @@media (max-width: 991.98px) {
    .register-form-container {
    padding: 2rem 1.5rem;
    }
    }

    @@media (max-width: 767.98px) {
    .register-card {
    margin: 1rem;
    }
    }
</style>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool isRegistering = false;
    public bool AgreeToTerms = false;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private async Task HandleRegister()
    {
        isRegistering = true;
        var resquestModel = new ResgisterRequest
        {
                UserName = registerModel.UserName,
                Email = registerModel.Email,
                Password = registerModel.Password
        };

        var response = await Http.PostAsJsonAsync("https://localhost:7222/api/customers/signup", resquestModel);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");

        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Đăng nhập thất bại: {errorMessage}");
        }

        isRegistering = false;
    }

    private void RegisterWithFacebook()
    {
        // Trong thực tế, đây là nơi bạn sẽ điều hướng người dùng đến trang xác thực Facebook
    }

    private void RegisterWithGoogle()
    {
        // Trong thực tế, đây là nơi bạn sẽ điều hướng người dùng đến trang xác thực Google
    }

    public class ResgisterRequest
    {
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "Vui lòng nhập tên")]
        [Display(Name = "Tên")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Vui lòng nhập email")]
        [EmailAddress(ErrorMessage = "Email không hợp lệ")]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Vui lòng nhập mật khẩu")]
        [StringLength(100, ErrorMessage = "Mật khẩu phải có ít nhất {2} ký tự.", MinimumLength = 8)]
        // [DataType(DataType.Password)]
        [Display(Name = "Mật khẩu")]
        // [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", 
        //     ErrorMessage = "Mật khẩu phải có ít nhất 8 ký tự, bao gồm chữ hoa, chữ thường, số và ký tự đặc biệt.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Bạn phải đồng ý với điều khoản sử dụng")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "Bạn phải đồng ý với điều khoản sử dụng")]
        [Display(Name = "Đồng ý với điều khoản")]
        public bool AgreeToTerms { get; set; }
    }
} 