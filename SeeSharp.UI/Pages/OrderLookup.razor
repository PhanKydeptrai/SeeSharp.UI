@page "/order-lookup"
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow border-0">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Tra cứu đơn hàng</h3>
                </div>
                <div class="card-body">
                    <div class="alert alert-info" role="alert">
                        <i class="bi bi-info-circle-fill me-2"></i>
                        Vui lòng nhập mã đơn hàng để tra cứu trạng thái đơn hàng của bạn.
                    </div>

                    <EditForm Model="@orderLookupRequest" OnValidSubmit="@HandleLookupSubmit">
                        <DataAnnotationsValidator />

                        <div class="mb-3">
                            <label for="orderId" class="form-label">Mã đơn hàng</label>
                            <InputText id="orderId" class="form-control" @bind-Value="orderLookupRequest.OrderId" />
                            <ValidationMessage For="@(() => orderLookupRequest.OrderId)" class="text-danger" />
                            <small class="form-text text-muted">Mã đơn hàng có trong email xác nhận đơn hàng của bạn</small>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Đang tìm kiếm...</span>
                                }
                                else
                                {
                                    <span>Tra cứu đơn hàng</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-4" role="alert">
                            <i class="bi bi-exclamation-triangle-fill me-2"></i>
                            @errorMessage
                        </div>
                    }
                </div>
            </div>

            @if (orderDetails != null)
            {
                <div class="card shadow border-0 mt-4">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0">Thông tin đơn hàng #@orderDetails.OrderId</h4>
                    </div>
                    <div class="card-body">
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5>Thông tin khách hàng</h5>
                                <p><strong>Tên:</strong> @orderDetails.UserName</p>
                                <p><strong>Điện thoại:</strong> @orderDetails.PhoneNumber</p>
                                <p><strong>Địa chỉ:</strong> @orderDetails.SpecificAddress</p>
                            </div>
                            <div class="col-md-6">
                                <h5>Thông tin đơn hàng</h5>
                                <p><strong>Mã đơn hàng:</strong> @orderDetails.OrderId</p>
                                <p>
                                    <strong>Trạng thái thanh toán:</strong>
                                    <span class="badge @GetStatusBadgeClass(orderDetails.PaymentStatus)">
                                        @orderDetails.PaymentStatus
                                    </span>
                                </p>
                                <p><strong>Phương thức thanh toán:</strong> @orderDetails.PaymentMethod</p>
                                <p><strong>Tổng tiền:</strong> @FormatCurrency(orderDetails.Total)</p>
                            </div>
                        </div>

                        <h5>Chi tiết đơn hàng</h5>
                        <div class="table-responsive">
                            <table class="table table-bordered">
                                <thead>
                                    <tr>
                                        <th>Sản phẩm</th>
                                        <th>Đơn giá</th>
                                        <th>Số lượng</th>
                                        <th>Thành tiền</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in orderDetails.OrderDetails)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                                    {
                                                        <img src="@item.ImageUrl" alt="@item.ProductName" width="50" height="50" 
                                                            class="img-thumbnail me-2" />
                                                    }
                                                    <div>
                                                        <div>@item.ProductName</div>
                                                        @if (!string.IsNullOrEmpty(item.VariantName))
                                                        {
                                                            <small class="text-muted">@item.VariantName</small>
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                            <td>@FormatCurrency(item.Price)</td>
                                            <td>@item.Quantity</td>
                                            <td>@FormatCurrency(item.Total)</td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <td colspan="3" class="text-end"><strong>Tổng cộng:</strong></td>
                                        <td><strong>@FormatCurrency(orderDetails.Total)</strong></td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private OrderLookupRequest orderLookupRequest = new();
    private OrderDetailsResponse? orderDetails;
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLookupSubmit()
    {
        errorMessage = string.Empty;
        isLoading = true;
        
        try
        {
            var response = await Http.GetFromJsonAsync<OrderDetailsResponse>(
                $"https://localhost:7222/api/orders/history/{orderLookupRequest.OrderId}"
            );
            
            if (response != null)
            {
                orderDetails = response;
            }
            else
            {
                errorMessage = "Không tìm thấy thông tin đơn hàng. Vui lòng kiểm tra lại mã đơn hàng.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error looking up order: {ex.Message}");
            errorMessage = "Đã xảy ra lỗi khi tra cứu đơn hàng. Vui lòng thử lại sau.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "completed" or "paid" => "bg-success",
            "processing" or "pending" => "bg-warning",
            "cancelled" or "failed" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    // Format currency as VND
    private string FormatCurrency(decimal amount)
    {
        return string.Format("{0:#,##0} VNĐ", amount);
    }

    // Models
    private class OrderLookupRequest
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Vui lòng nhập mã đơn hàng")]
        public string OrderId { get; set; } = string.Empty;
    }

    private class OrderDetailsResponse
    {
        public string CustomerId { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string PhoneNumber { get; set; } = string.Empty;
        public string SpecificAddress { get; set; } = string.Empty;
        public decimal Total { get; set; }
        public string PaymentStatus { get; set; } = string.Empty;
        public string PaymentMethod { get; set; } = string.Empty;
        public string? VoucherCode { get; set; }
        public string BillId { get; set; } = string.Empty;
        public decimal BillTotal { get; set; }
        public string OrderId { get; set; } = string.Empty;
        public List<OrderDetail> OrderDetails { get; set; } = new List<OrderDetail>();
    }

    private class OrderDetail
    {
        public string OrderDetailId { get; set; } = string.Empty;
        public string ProductId { get; set; } = string.Empty;
        public string ProductName { get; set; } = string.Empty;
        public string VariantName { get; set; } = string.Empty;
        public string ColorCode { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public string ImageUrl { get; set; } = string.Empty;
        public decimal Total { get; set; }
    }

    private class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }
} 