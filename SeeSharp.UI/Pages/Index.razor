@page "/"
@using Blazored.LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@inject HttpClient Http
<PageTitle>Trang chủ - Gọng Kính Thời Trang C#</PageTitle>

<div class="container mt-4">
    <!-- Hero Banner -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card bg-dark text-white">
                <img src="https://images.unsplash.com/photo-1577803645773-f96470509666?auto=format&fit=crop&w=1200&h=400" class="card-img" alt="Banner kính thời trang">
                <div class="card-img-overlay d-flex flex-column justify-content-center">
                    <h1 class="card-title">Gọng kính thời trang cao cấp</h1>
                    <p class="card-text">Khám phá bộ sưu tập gọng kính mới nhất với thiết kế hiện đại và chất lượng hàng đầu</p>
                    <a href="/collections" class="btn btn-primary w-25">Xem sản phẩm</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Featured Products -->
    <h2 class="mb-4">Sản phẩm nổi bật</h2>
    <div class="row mb-5">
        @if (isLoading)
        {
            @for (int i = 0; i < 4; i++)
            {
                <div class="col-md-3 mb-4">
                    <div class="card h-100">
                        <div class="skeleton skeleton-image"></div>
                        <div class="card-body d-flex flex-column">
                            <div class="skeleton skeleton-text title"></div>
                            <div class="skeleton skeleton-text small"></div>
                            <div class="skeleton skeleton-text price"></div>
                            <div class="mt-auto d-flex">
                                <div class="skeleton skeleton-button w-100"></div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else if (productList == null || productList.Items.Count == 0)
        {
            <div class="col-12 text-center py-3">
                <p>Không có sản phẩm nào để hiển thị.</p>
            </div>
        }
        else
        {
            @foreach (var product in productList.Items)
            {
                bool isOutOfStock = product.Status == "OutOfStock";
                <div class="col-md-3 mb-4">
                    <div class="card h-100 product-card @(isOutOfStock ? "out-of-stock" : "")">
                        <div class="position-relative">
                            <img src="@(string.IsNullOrEmpty(product.ImageUrl) ? "https://placehold.co/300x200" : product.ImageUrl)" 
                                 class="card-img-top" alt="@product.ProductName">
                            @if (product.Status == "Sale")
                            {
                                <span class="badge bg-danger position-absolute top-0 end-0 m-2">Sale</span>
                            }
                            @if (product.Status == "New")
                            {
                                <span class="badge bg-success position-absolute top-0 start-0 m-2">Mới</span>
                            }
                            @if (isOutOfStock)
                            {
                                <span class="badge bg-secondary position-absolute top-0 end-0 m-2">Hết hàng</span>
                            }
                        </div>
                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title">@product.ProductName</h5>
                            <p class="text-muted small">@product.CategoryName</p>
                            <p class="card-text">@product.PriceOfBaseVariant.ToString("N0")đ</p>
                            <div class="mt-auto d-flex">
                                <a href="/product/@product.ProductId" class="btn btn-sm btn-outline-primary flex-grow-1 me-2">Xem chi tiết</a>
                                <button class="btn btn-sm btn-primary @(isOutOfStock ? "disabled" : "")" 
                                        disabled="@isOutOfStock"
                                        @onclick="() => AddToCart(product.BaseVariantId)">
                                    <i class="bi bi-cart-plus"></i>
                                </button>
                            </div>
                        </div>
                        @if (isOutOfStock)
                        {
                            <div class="out-of-stock-overlay">
                                <div class="out-of-stock-message">Hết hàng</div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>

    <!-- Categories -->
    <h2 class="mb-4">Danh mục sản phẩm</h2>
    <div class="row mb-5">
        <div class="col-md-4 mb-4">
            <div class="card bg-light">
                <div class="card-body text-center">
                    <i class="bi bi-eyeglasses" style="font-size: 2rem;"></i>
                    <h5 class="mt-3">Gọng kính nam</h5>
                    <p>Đa dạng mẫu mã phù hợp với phong cách nam tính</p>
                    <a href="/collections/men" class="btn btn-outline-dark">Xem thêm</a>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="card bg-light">
                <div class="card-body text-center">
                    <i class="bi bi-sunglasses" style="font-size: 2rem;"></i>
                    <h5 class="mt-3">Gọng kính nữ</h5>
                    <p>Thiết kế thanh lịch, sang trọng dành cho phái đẹp</p>
                    <a href="/collections/women" class="btn btn-outline-dark">Xem thêm</a>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="card bg-light">
                <div class="card-body text-center">
                    <i class="bi bi-stars" style="font-size: 2rem;"></i>
                    <h5 class="mt-3">Thương hiệu cao cấp</h5>
                    <p>Sản phẩm từ các nhãn hiệu nổi tiếng trên thế giới</p>
                    <a href="/collections/luxury" class="btn btn-outline-dark">Xem thêm</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Testimonials -->
    <h2 class="mb-4">Khách hàng nói gì về chúng tôi</h2>
    <div class="row mb-5">
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <img src="https://images.unsplash.com/photo-1599837200976-c31fdb4600ee?auto=format&fit=crop&w=50&h=50" class="rounded-circle me-3" alt="Avatar">
                        <div>
                            <h5 class="mb-0">Nguyễn Văn A</h5>
                            <div class="text-warning">
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                            </div>
                        </div>
                    </div>
                    <p class="card-text">"Sản phẩm chất lượng, dịch vụ tuyệt vời. Tôi rất hài lòng với gọng kính mới của mình."</p>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <img src="https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?auto=format&fit=crop&w=50&h=50" class="rounded-circle me-3" alt="Avatar">
                        <div>
                            <h5 class="mb-0">Trần Thị B</h5>
                            <div class="text-warning">
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-half"></i>
                            </div>
                        </div>
                    </div>
                    <p class="card-text">"Gọng kính rất phù hợp với khuôn mặt, giá cả phải chăng, giao hàng nhanh."</p>
                </div>
            </div>
        </div>
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <img src="https://images.unsplash.com/photo-1506863530036-1efeddceb993?auto=format&fit=crop&w=50&h=50" class="rounded-circle me-3" alt="Avatar">
                        <div>
                            <h5 class="mb-0">Lê Văn C</h5>
                            <div class="text-warning">
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star-fill"></i>
                                <i class="bi bi-star"></i>
                            </div>
                        </div>
                    </div>
                    <p class="card-text">"Nhân viên tư vấn nhiệt tình, giúp tôi chọn được mẫu kính ưng ý nhất."</p>
                </div>
            </div>
        </div>
    </div>
</div> 

<style>
    .skeleton {
        position: relative;
        overflow: hidden;
        background-color: #f0f0f0;
    }
    
    .skeleton::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        transform: translateX(-100%);
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
        animation: shimmer 1.5s infinite;
    }
    
    @@keyframes shimmer {
        100% {
            transform: translateX(100%);
        }
    }
    
    .skeleton-image {
        height: 200px;
        border-radius: 4px 4px 0 0;
    }
    
    .skeleton-text {
        height: 16px;
        margin-bottom: 8px;
        border-radius: 4px;
    }
    
    .skeleton-text.title {
        height: 22px;
        width: 80%;
    }
    
    .skeleton-text.small {
        width: 60%;
        height: 14px;
    }
    
    .skeleton-text.price {
        width: 40%;
    }
    
    .skeleton-button {
        height: 38px;
        border-radius: 4px;
        margin-top: 12px;
    }
    
    /* Product Card Styling */
    .product-card {
        transition: transform 0.3s, box-shadow 0.3s;
        position: relative;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
    
    /* Out of Stock Styling */
    .product-card.out-of-stock {
        opacity: 0.7;
    }
    
    .out-of-stock-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 2;
    }
    
    .out-of-stock-message {
        background-color: rgba(108, 117, 125, 0.85);
        color: white;
        padding: 8px 20px;
        border-radius: 4px;
        font-weight: bold;
        transform: rotate(-15deg);
        font-size: 1.2rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }
</style>

@code{
    private bool isLoading = true;
    private PagedList<ProductResponse>? productList;

    protected override async Task OnInitializedAsync()
    {
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        
        // Check if accessToken exists in localStorage
        var accessToken = await LocalStorage.GetItemAsStringAsync("accessToken");
        
        // If no accessToken exists, check for a guest token
        if (string.IsNullOrEmpty(accessToken))
        {
            // Check if guestToken already exists
            var guestToken = await LocalStorage.GetItemAsStringAsync("guestToken");
            
            // Only call the API if neither accessToken nor guestToken exists
            if (string.IsNullOrEmpty(guestToken))
            {
                try
                {
                    // Call the guest token endpoint
                    var response = await Http.GetFromJsonAsync<GuestTokenResponse>("https://localhost:7222/api/customers/guest-token");
                    
                    if (response != null && !string.IsNullOrEmpty(response.Token))
                    {
                        // Store the guest token in localStorage
                        await LocalStorage.SetItemAsStringAsync("guestToken", response.Token);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error getting guest token: {ex.Message}");
                }
            }
        }

        await LoadFeaturedProducts();
    }

    private async Task LoadFeaturedProducts()
    {
        try
        {
            isLoading = true;
            // Get first page of products with page size 4 to show on homepage
            string url = "https://localhost:7222/api/products?page=1&pageSize=4";
            productList = await Http.GetFromJsonAsync<PagedList<ProductResponse>>(url);
            Console.WriteLine($"Loaded {productList?.Items.Count ?? 0} products for homepage");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task AddToCart(Guid productVariantId)
    {
        try
        {
            var orderRequest = new OrderRequest
            {
                ProductVariantId = productVariantId,
                Quantity = 1
            };
            
            HttpResponseMessage response;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            bool isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
            
            if (isAuthenticated)
            {
                // Use the regular endpoint for authenticated users
                response = await Http.PostAsJsonAsync("https://localhost:7222/api/orders", orderRequest);
            }
            else
            {
                // Get guest token from localStorage
                var guestToken = await LocalStorage.GetItemAsStringAsync("guestToken");
                
                // If no guest token exists, get a new one
                if (string.IsNullOrEmpty(guestToken))
                {
                    try
                    {
                        // Call the guest token endpoint
                        var tokenResponse = await Http.GetFromJsonAsync<GuestTokenResponse>("https://localhost:7222/api/customers/guest-token");
                        
                        if (tokenResponse != null && !string.IsNullOrEmpty(tokenResponse.Token))
                        {
                            // Store the guest token in localStorage
                            await LocalStorage.SetItemAsStringAsync("guestToken", tokenResponse.Token);
                            guestToken = tokenResponse.Token;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error getting guest token: {ex.Message}");
                        return;
                    }
                }
                
                // Create a new HttpRequestMessage with Bearer token
                var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:7222/api/orders/guest")
                {
                    Content = JsonContent.Create(orderRequest)
                };
                
                // Add Bearer token to request header
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", guestToken);
                
                // Send request
                response = await Http.SendAsync(request);
            }
            
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Product added to cart successfully");
            }
            else
            {
                Console.WriteLine($"Error adding to cart: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding to cart: {ex.Message}");
        }
    }

    // Response model for the guest token API
    private class GuestTokenResponse
    {
        public string Token { get; set; } = string.Empty;
    }

    private class OrderRequest
    {
        public Guid ProductVariantId { get; set; }
        public int Quantity { get; set; }
    }

    private class VariantResponse
    {
        public Guid ProductVariantId { get; set; }
        public Guid ProductId { get; set; }
        public string VariantName { get; set; } = string.Empty;
        public string ColorCode { get; set; } = string.Empty;
        public string ProductCode { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public string? ImageUrl { get; set; }
        public bool IsAvailable { get; set; }
        public bool IsBaseVariant { get; set; }
    }

    private class ProductResponse
    {
        public Guid ProductId { get; set; }
        public Guid BaseVariantId { get; set; }
        public string ProductName { get; set; } = string.Empty;
        public decimal PriceOfBaseVariant { get; set; }
        public string? ImageUrl { get; set; }
        public string? Description { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string CategoryName { get; set; } = string.Empty;
        public List<VariantResponse> Variants { get; set; } = new List<VariantResponse>();
    }

    private class PagedList<T>
    {
        public List<T> Items { get; set; } = new List<T>();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public bool HasNextPage { get; set; }
        public bool HaspreviousPage { get; set; }
    }
}