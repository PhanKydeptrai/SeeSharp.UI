@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject IJSRuntime JSRuntime

<div class="page">
    <AuthorizeView>
        <Authorized>
            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <div class="top-row px-4">
                    <div class="user-info">
                        <div class="dropdown">
                            <button class="user-dropdown-toggle" @onclick="ToggleUserDropdown" @onclick:stopPropagation>
                                <div class="user-avatar-small"></div>
                                <span class="user-greeting">@context.User.Identity?.Name</span>
                                <i class="bi bi-chevron-down ms-1"></i>
                            </button>
                            <div class="user-dropdown-menu @(showUserDropdown ? "show" : "")">
                                <a href="/settings" class="dropdown-item" @onclick="CloseUserDropdown">
                                    <i class="bi bi-person-gear me-2"></i>User Settings
                                </a>
                                <div class="dropdown-divider"></div>
                                <button class="dropdown-item" @onclick="LogoutUser">
                                    <i class="bi bi-box-arrow-right me-2"></i>Logout
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <article class="content px-4">
                    @Body
                </article>
            </main>
        </Authorized>
        <NotAuthorized>
            <main class="auth-main">
                @Body
            </main>
        </NotAuthorized>
    </AuthorizeView>
</div>

<style>
    .user-info {
        display: flex;
        align-items: center;
        justify-content: flex-end;
        position: relative;
    }

    .user-avatar-small {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-color: #f0f0f0;
        margin-right: 8px;
        background-image: url('https://via.placeholder.com/32');
        background-size: cover;
        background-position: center;
    }

    .user-dropdown-toggle {
        display: flex;
        align-items: center;
        background: none;
        border: none;
        padding: 4px 8px;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .user-dropdown-toggle:hover {
        background-color: rgba(0, 0, 0, 0.05);
    }

    .user-greeting {
        font-weight: 500;
        color: #444;
    }

    .user-dropdown-menu {
        position: absolute;
        top: 100%;
        right: 0;
        z-index: 1000;
        display: none;
        min-width: 200px;
        padding: 0.5rem 0;
        margin: 0.125rem 0 0;
        background-color: #fff;
        border: 1px solid rgba(0, 0, 0, 0.1);
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
    }

    .user-dropdown-menu.show {
        display: block;
    }

    .dropdown-item {
        display: flex;
        align-items: center;
        padding: 0.5rem 1rem;
        clear: both;
        font-weight: 400;
        color: #212529;
        text-align: inherit;
        text-decoration: none;
        white-space: nowrap;
        background-color: transparent;
        border: 0;
        width: 100%;
        text-align: left;
        cursor: pointer;
    }

    .dropdown-item:hover {
        background-color: rgba(13, 110, 253, 0.1);
        color: #0a58ca;
    }

    .dropdown-divider {
        height: 0;
        margin: 0.5rem 0;
        overflow: hidden;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    private bool showUserDropdown = false;

    private async Task LogoutUser()
    {
        showUserDropdown = false;
        // Use the CustomAuthenStateProvider's method
        await ((CustomAuthenStateProvider)AuthStateProvider).MarkUserAsLoggedOut();
        NavigationManager.NavigateTo("/login");
    }

    private void ToggleUserDropdown()
    {
        showUserDropdown = !showUserDropdown;
    }

    private void CloseUserDropdown()
    {
        showUserDropdown = false;
    }

    // Close dropdown when clicking elsewhere on the page
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("document.addEventListener", "click", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public void CloseDropdown()
    {
        if (showUserDropdown)
        {
            showUserDropdown = false;
            StateHasChanged();
        }
    }
}
