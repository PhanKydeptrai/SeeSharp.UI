@page "/products"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@using System.Globalization
@attribute [Authorize]

<PageTitle>Products - Admin Dashboard</PageTitle>

<PageRedirector>
    <div class="page-container">
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="page-title">
                        <i class="bi bi-eyeglasses me-2"></i>Products
                    </h1>
                    <button class="btn btn-primary" @onclick="AddNewProduct">
                        <i class="bi bi-plus-lg me-2"></i>Add New Product
                    </button>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div class="input-group search-group">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Search products..." 
                                       @bind="searchTerm" @bind:event="oninput" 
                                       @onkeyup="HandleSearchKeyUp" />
                                @if (!string.IsNullOrWhiteSpace(searchTerm))
                                {
                                    <span class="input-group-text clear-search-btn" @onclick="ClearSearch">
                                        <i class="bi bi-x-circle"></i>
                                    </span>
                                }
                            </div>
                            <div class="d-flex gap-2">
                                <select class="form-select" @onchange="OnCategorySelected">
                                    <option value="">All Categories</option>
                                    @if (categories != null && categories.Any())
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.CategoryId">@category.CategoryName</option>
                                        }
                                    }
                                </select>
                                <select class="form-select" @onchange="OnStatusSelected">
                                    <option value="">Status: All</option>
                                    <option value="InStock">Status: In Stock</option>
                                    <option value="OutOfStock">Status: Out of Stock</option>
                                </select>
                                <select class="form-select" @onchange="HandleSortChange">
                                    <option selected value="">Default Sort</option>
                                    <option value="productname-asc">Name: A-Z</option>
                                    <option value="productname-desc">Name: Z-A</option>
                                    <option value="price-asc">Price: Low to High</option>
                                    <option value="price-desc">Price: High to Low</option>
                                    <option value="productid-desc">Newest</option>
                                    <option value="productid-asc">Oldest</option>
                                </select>
                            </div>
                        </div>

                        @if (isLoading)
                        {
                            <div class="d-flex justify-content-center my-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (productResponse?.Items?.Count == 0)
                        {
                            <div class="alert alert-info">
                                <h5 class="alert-heading">No products found</h5>
                                @if (!string.IsNullOrWhiteSpace(searchTerm) || !string.IsNullOrWhiteSpace(_selectedCategoryId) || !string.IsNullOrWhiteSpace(selectedStatus))
                                {
                                    <p>
                                        No products match your filter criteria
                                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                                        {
                                            <span>with search term: <strong>"@searchTerm"</strong></span>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(_selectedCategoryId))
                                        {
                                            var categoryName = categories.FirstOrDefault(c => c.CategoryId == _selectedCategoryId)?.CategoryName ?? "";
                                            <span>
                                                in category: <strong>@categoryName</strong>
                                            </span>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(selectedStatus))
                                        {
                                            <span>
                                                with status: <strong>@selectedStatus</strong>
                                            </span>
                                        }
                                    </p>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="ClearAllFilters">
                                        <i class="bi bi-arrow-clockwise me-1"></i>Clear all filters
                                    </button>
                                }
                                else
                                {
                                    <p>There are no products available in the system.</p>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Image</th>
                                            <th>Product Name</th>
                                            <th>Price</th>
                                            <th>Category</th>
                                            <th>Status</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var product in productResponse?.Items ?? new List<ProductDto>())
                                        {
                                            <tr class="product-row" @onclick="() => NavigateToProductDetail(product.ProductId)">
                                                <td>
                                                    <div class="product-image-small" style="@(string.IsNullOrEmpty(product.ImageUrl) ? "" : $"background-image: url('{product.ImageUrl}')")"></div>
                                                </td>
                                                <td class="fw-medium">@product.ProductName</td>
                                                <td>
                                                    @{
                                                        var vndCulture = new CultureInfo("vi-VN");
                                                        @string.Format(vndCulture, "{0:N0} VNƒê", product.PriceOfBaseVariant)
                                                    }
                                                </td>
                                                <td>@product.CategoryName</td>
                                                <td>
                                                    <span class="badge @(product.Status == "InStock" ? "bg-success" : "bg-danger")">
                                                        @(product.Status == "InStock" ? "In Stock" : "Out of Stock")
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="action-buttons">
                                                        <button class="btn btn-sm btn-outline-primary" title="View" @onclick:stopPropagation @onclick="async () => await ViewProduct(product.ProductId)">
                                                            <i class="bi bi-eye"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-secondary" title="Edit" @onclick:stopPropagation @onclick="() => EditProduct(product.ProductId)">
                                                            <i class="bi bi-pencil"></i>
                                                        </button>
                                                        @if (product.Status == "InStock")
                                                        {
                                                            <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick:stopPropagation @onclick="() => ShowDeleteConfirmation(product)">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button class="btn btn-sm btn-outline-success" title="Restore to Stock" @onclick:stopPropagation @onclick="() => RestoreProduct(product)">
                                                                <i class="bi bi-arrow-repeat"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <div class="d-flex justify-content-between align-items-center mt-4">
                                <div class="text-muted">
                                    Showing @((productResponse?.Page - 1) * productResponse?.PageSize + 1) to @Math.Min(productResponse?.Page * productResponse?.PageSize ?? 0, productResponse?.TotalCount ?? 0) of @productResponse?.TotalCount entries
                                </div>
                                <nav aria-label="Product pagination">
                                    <ul class="pagination mb-0">
                                        <li class="page-item @(productResponse?.HasPreviousPage != true ? "disabled" : "")">
                                            <a class="page-link" href="javascript:void(0)" @onclick="PreviousPage" tabindex="-1" aria-disabled="@(productResponse?.HasPreviousPage != true)">Previous</a>
                                        </li>
                                        @{
                                            int totalPages = (int)Math.Ceiling((productResponse?.TotalCount ?? 0) / (double)(productResponse?.PageSize ?? 1));
                                            for (int i = 1; i <= totalPages; i++)
                                            {
                                                int pageNumber = i;
                                                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                                    <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(pageNumber)">@pageNumber</a>
                                                </li>
                                            }
                                        }
                                        <li class="page-item @(productResponse?.HasNextPage != true ? "disabled" : "")">
                                            <a class="page-link" href="javascript:void(0)" @onclick="NextPage">Next</a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete confirmation modal -->
    @if (showDeleteModal)
    {
        <div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete the product <strong>@productToDelete?.ProductName</strong>?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Toast notifications -->
    @if (showToast)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show toast-custom @(isToastVisible ? "toast-visible" : "toast-hidden")" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header @toastHeaderClass">
                    <i class="bi @toastIcon me-2"></i>
                    <strong class="me-auto">@toastTitle</strong>
                    <small>just now</small>
                    <button type="button" class="btn-close" @onclick="CloseToast"></button>
                </div>
                <div class="toast-body">
                    @toastMessage
                </div>
            </div>
        </div>
    }
</PageRedirector>

<style>
    .page-container {
        padding: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 0;
        color: #333;
    }

    .search-group {
        max-width: 350px;
    }

    .product-image-small {
        width: 50px;
        height: 40px;
        background-color: #f0f0f0;
        border-radius: 6px;
        background-image: url('https://via.placeholder.com/50x40');
        background-size: cover;
        background-position: center;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .table th {
        font-weight: 600;
        color: #555;
    }

    .card {
        border-radius: 0.5rem;
        border: 1px solid rgba(0,0,0,0.08);
        box-shadow: 0 4px 6px rgba(0,0,0,0.02);
    }
    
    .product-row {
        cursor: pointer;
    }
    
    .product-row:hover {
        background-color: rgba(0,0,0,0.02);
    }

    .toast-container {
        z-index: 1050;
    }
    
    .bg-success-light {
        background-color: rgba(25, 135, 84, 0.2);
        color: #198754;
    }
    
    .bg-danger-light {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
    }
    
    .toast-custom {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
        border: none;
        border-radius: 10px;
        overflow: hidden;
        min-width: 300px;
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    }
    
    .toast-hidden {
        transform: translateX(100%);
        opacity: 0;
    }
    
    .toast-visible {
        transform: translateX(0);
        opacity: 1;
    }
    
    .toast-header {
        border-bottom: none;
        padding: 0.75rem 1rem;
    }
    
    .toast-body {
        padding: 0.75rem 1rem 1rem;
        font-size: 0.95rem;
    }

    .clear-search-btn {
        cursor: pointer;
        background-color: transparent;
        border-left: none;
    }

    .clear-search-btn:hover {
        color: #dc3545;
    }
</style>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    
    [Inject]
    private HttpClient HttpClient { get; set; }
    
    private ProductResponseDto? productResponse;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";
    private string _selectedCategoryId = "";
    private string selectedCategoryId 
    { 
        get => _selectedCategoryId;
        set
        {
            if (_selectedCategoryId != value)
            {
                _selectedCategoryId = value;
                HandleCategoryChangeAsync().ConfigureAwait(false);
            }
        }
    }
    private string selectedStatus = "";
    private string sortColumn = "";
    private string sortOrder = "";
    private List<CategoryInfoDto> categories = new();
    
    // Delete modal properties
    private bool showDeleteModal = false;
    private ProductDto? productToDelete;
    
    // Toast notification properties
    private bool showToast = false;
    private bool isToastVisible = false;
    private string toastTitle = "";
    private string toastMessage = "";
    private string toastHeaderClass = "";
    private string toastIcon = "";
    private System.Threading.Timer? toastTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await LoadProductsAsync();
    }
    
    private async Task LoadCategoriesAsync()
    {
        try
        {
            categories = await HttpClient.GetFromJsonAsync<List<CategoryInfoDto>>("https://localhost:7222/api/categories/info");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            ShowErrorToast("Error", "Failed to load categories. Please try again.");
        }
    }
    
    private async Task LoadProductsAsync()
    {
        isLoading = true;
        
        try
        {
            var url = $"https://localhost:7222/api/products?page={currentPage}&pageSize={pageSize}";
            
            // Add search term if provided
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                url += $"&searchTerm={Uri.EscapeDataString(searchTerm)}";
            }
            
            // Add category filter if selected
            if (!string.IsNullOrWhiteSpace(_selectedCategoryId))
            {
                url += $"&filterCategory={Uri.EscapeDataString(_selectedCategoryId)}";
                Console.WriteLine($"Filtering by category ID: {_selectedCategoryId}");
            }
            
            // Add status filter if selected
            if (!string.IsNullOrWhiteSpace(selectedStatus))
            {
                url += $"&filterProductStatus={Uri.EscapeDataString(selectedStatus)}";
                Console.WriteLine($"Filtering by status: {selectedStatus}");
            }
            
            // Add sort parameters
            if (!string.IsNullOrWhiteSpace(sortColumn) && !string.IsNullOrWhiteSpace(sortOrder))
            {
                url += $"&sortColumn={Uri.EscapeDataString(sortColumn)}&sortOrder={Uri.EscapeDataString(sortOrder)}";
                Console.WriteLine($"Sorting by column: {sortColumn}, order: {sortOrder}");
            }
            
            Console.WriteLine($"Calling API: {url}");
            productResponse = await HttpClient.GetFromJsonAsync<ProductResponseDto>(url);
            Console.WriteLine($"API returned {productResponse?.Items?.Count ?? 0} products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            ShowErrorToast("Error", "Failed to load products. Please try again.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadProductsAsync();
    }
    
    private async Task NextPage()
    {
        if (productResponse?.HasNextPage == true)
        {
            currentPage++;
            await LoadProductsAsync();
        }
    }
    
    private async Task PreviousPage()
    {
        if (productResponse?.HasPreviousPage == true)
        {
            currentPage--;
            await LoadProductsAsync();
        }
    }

    private async Task HandleSearchKeyUp(KeyboardEventArgs e)
    {
        // T√¨m ki·∫øm ngay l·∫≠p t·ª©c khi nh·∫•n Enter
        if (e.Key == "Enter")
        {
            currentPage = 1; // Reset v·ªÅ trang ƒë·∫ßu ti√™n cho t√¨m ki·∫øm m·ªõi
            await LoadProductsAsync();
        }
    }

    private async Task HandleCategoryChangeAsync()
    {
        try 
        {
            // Khi thay ƒë·ªïi danh m·ª•c, reset v·ªÅ trang ƒë·∫ßu ti√™n v√† t·∫£i l·∫°i d·ªØ li·ªáu
            currentPage = 1;
            await LoadProductsAsync();
            // ƒê·∫£m b·∫£o UI ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling category change: {ex.Message}");
            ShowErrorToast("Error", "Failed to filter products by category. Please try again.");
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        currentPage = 1;
        await LoadProductsAsync();
    }
    
    private async Task ClearAllFilters()
    {
        searchTerm = "";
        _selectedCategoryId = "";
        selectedStatus = "";
        sortColumn = "";
        sortOrder = "";
        currentPage = 1;
        await LoadProductsAsync();
    }
    
    private void NavigateToProductDetail(string productId)
    {
        NavigationManager.NavigateTo($"/products/{productId}");
    }
    
    private async Task ViewProduct(string productId) 
    {
        try
        {
            // Call the GET endpoint for product details
            var response = await HttpClient.GetAsync($"https://localhost:7222/api/products/{productId}");
            
            if (response.IsSuccessStatusCode)
            {
                var productDetail = await response.Content.ReadFromJsonAsync<ProductDto>();
                // Navigate to product detail page
                NavigationManager.NavigateTo($"/products/{productId}");
            }
            else
            {
                ShowErrorToast("Error", $"Failed to retrieve product details. Status: {response.StatusCode}");
                Console.WriteLine($"Error retrieving product details: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Error", "An error occurred while retrieving product details.");
            Console.WriteLine($"Exception when retrieving product details: {ex.Message}");
        }
    }
    
    private void EditProduct(string productId)
    {
        NavigationManager.NavigateTo($"/products/{productId}/edit");
    }
    
    private void ShowDeleteConfirmation(ProductDto product)
    {
        productToDelete = product;
        showDeleteModal = true;
    }
    
    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        productToDelete = null;
    }
    
    private async Task ConfirmDelete()
    {
        if (productToDelete != null)
        {
            try
            {
                // Call API to delete product
                var response = await HttpClient.DeleteAsync($"https://localhost:7222/api/products/{productToDelete.ProductId}");
                
                if (response.IsSuccessStatusCode)
                {
                    // Show success notification
                    string productName = productToDelete.ProductName;
                    ShowSuccessToast("Success", $"Product '{productName}' was deleted successfully.");
                    
                    // Refresh the product list after successful deletion
                    await LoadProductsAsync();
                }
                else
                {
                    // Show error notification
                    ShowErrorToast("Error", $"Failed to delete the product. Status: {response.StatusCode}");
                    Console.WriteLine($"Error deleting product: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                ShowErrorToast("Error", "An error occurred while deleting the product.");
                Console.WriteLine($"Exception when deleting product: {ex.Message}");
            }
            finally
            {
                // Close the modal whether successful or not
                CloseDeleteModal();
            }
        }
    }
    
    private async Task ShowWithAnimation()
    {
        // First set the initial state (hidden)
        toastTimer?.Dispose();
        showToast = true;
        isToastVisible = false;
        await InvokeAsync(StateHasChanged);
        
        // Short delay to ensure the DOM is updated and the transition will work
        await Task.Delay(50);
        
        // Now show with animation
        isToastVisible = true;
        await InvokeAsync(StateHasChanged);
    }
    
    private void ShowSuccessToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = "bg-success-light";
        toastIcon = "bi-check-circle";
        
        // Show toast with animation
        _ = ShowWithAnimation();
        
        // Auto-hide toast after 5 seconds
        SetupToastAutoHide();
    }
    
    private void ShowErrorToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = "bg-danger-light";
        toastIcon = "bi-exclamation-circle";
        
        // Show toast with animation
        _ = ShowWithAnimation();
        
        // Auto-hide toast after 5 seconds
        SetupToastAutoHide();
    }
    
    private async Task CloseToast()
    {
        // Animate out
        isToastVisible = false;
        await InvokeAsync(StateHasChanged);
        
        // Wait for animation to complete
        await Task.Delay(300);
        
        // Then hide the toast
        showToast = false;
        toastTimer?.Dispose();
        toastTimer = null;
        await InvokeAsync(StateHasChanged);
    }
    
    private void SetupToastAutoHide()
    {
        // Dispose of existing timer if there is one
        toastTimer?.Dispose();
        
        // Create a new timer that will hide the toast after 5 seconds
        toastTimer = new System.Threading.Timer(async _ => 
        {
            await CloseToast();
        }, null, 5000, System.Threading.Timeout.Infinite);
    }
    
    private void AddNewProduct()
    {
        NavigationManager.NavigateTo("/products/create");
    }
    
    private async Task RestoreProduct(ProductDto product)
    {
        try
        {
            // Use PATCH to restore product
            var request = new HttpRequestMessage(HttpMethod.Patch, $"https://localhost:7222/api/products/{product.ProductId}/restore");
            var response = await HttpClient.SendAsync(request);
            
            if (response.IsSuccessStatusCode)
            {
                ShowSuccessToast("Success", $"Product '{product.ProductName}' has been restored to stock.");
                
                // Refresh the product list after successful status update
                await LoadProductsAsync();
            }
            else
            {
                ShowErrorToast("Error", $"Failed to restore product. Status: {response.StatusCode}");
                Console.WriteLine($"Error restoring product: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Error", "An error occurred while restoring the product.");
            Console.WriteLine($"Exception when restoring product: {ex.Message}");
        }
    }
    
    private async Task OnCategorySelected(ChangeEventArgs e)
    {
        var categoryId = e.Value?.ToString() ?? "";
        Console.WriteLine($"Category selected: {categoryId}");
        
        _selectedCategoryId = categoryId;
        currentPage = 1;
        
        await LoadProductsAsync();
    }
    
    private async Task OnStatusSelected(ChangeEventArgs e)
    {
        var status = e.Value?.ToString() ?? "";
        Console.WriteLine($"Status selected: {status}");
        
        selectedStatus = status;
        currentPage = 1;
        
        await LoadProductsAsync();
    }
    
    private async Task HandleSortChange(ChangeEventArgs e)
    {
        var sort = e.Value?.ToString() ?? "";
        Console.WriteLine($"Sort selected: {sort}");
        
        if (string.IsNullOrEmpty(sort))
        {
            sortColumn = "";
            sortOrder = "";
        }
        else
        {
            var parts = sort.Split('-');
            if (parts.Length == 2)
            {
                sortColumn = parts[0];
                sortOrder = parts[1];
            }
        }
        
        currentPage = 1;
        await LoadProductsAsync();
    }
    
    public class CategoryInfoDto
    {
        public string CategoryId { get; set; }
        public string CategoryName { get; set; }
    }
    
    public class ProductDto
    {
        public string ProductId { get; set; }
        public string BaseVariantId { get; set; }
        public string ProductName { get; set; }
        public decimal PriceOfBaseVariant { get; set; }
        public string ImageUrl { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public string CategoryName { get; set; }
        public List<ProductVariantDto> Variants { get; set; } = new();
    }
    
    public class ProductVariantDto
    {
        public string ProductVariantId { get; set; }
        public string ProductId { get; set; }
        public string VariantName { get; set; }
        public string ColorCode { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string ImageUrl { get; set; }
        public bool IsBaseVariant { get; set; }
    }
    
    public class ProductResponseDto
    {
        public List<ProductDto> Items { get; set; } = new();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
    }
} 