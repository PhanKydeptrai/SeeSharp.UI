@page "/vouchers"
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@attribute [Authorize]

<PageTitle>Vouchers - Admin Dashboard</PageTitle>

<PageRedirector>
    <div class="page-container">
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="page-title">
                        <i class="bi bi-ticket-perforated me-2"></i>Vouchers
                    </h1>
                    <button class="btn btn-primary" @onclick="ShowCreateVoucherModal">
                        <i class="bi bi-plus-lg me-2"></i>Add New Voucher
                    </button>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div class="input-group search-group">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Search vouchers..." @bind-value="searchQuery" @bind-value:event="oninput">
                            </div>
                            <div class="d-flex gap-2">
                                <select class="form-select" @bind="statusFilter">
                                    <option value="">All Statuses</option>
                                    <option value="Active">Active</option>
                                    <option value="Expired">Expired</option>
                                    <option value="Used">Used</option>
                                    <option value="Inactive">Inactive</option>
                                </select>
                                <select class="form-select" @bind="typeFilter">
                                    <option value="">All Types</option>
                                    <option value="Percentage">Percentage</option>
                                    <option value="Fixed">Fixed Amount</option>
                                    <option value="Shipping">Free Shipping</option>
                                </select>
                            </div>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Code</th>
                                        <th>Description</th>
                                        <th>Discount</th>
                                        <th>Type</th>
                                        <th>Valid From</th>
                                        <th>Valid To</th>
                                        <th>Usage / Limit</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var voucher in GetFilteredVouchers())
                                    {
                                        <tr>
                                            <td class="fw-medium">@voucher.Code</td>
                                            <td>@voucher.Description</td>
                                            <td>
                                                @if (voucher.Type == "Percentage")
                                                {
                                                    @($"{voucher.DiscountValue}%")
                                                }
                                                else if (voucher.Type == "Fixed")
                                                {
                                                    @($"${voucher.DiscountValue}")
                                                }
                                                else
                                                {
                                                    @("Free Shipping")
                                                }
                                            </td>
                                            <td>@voucher.Type</td>
                                            <td>@voucher.ValidFrom.ToString("MMM dd, yyyy")</td>
                                            <td>@voucher.ValidTo.ToString("MMM dd, yyyy")</td>
                                            <td>@voucher.UsageCount / @voucher.UsageLimit</td>
                                            <td>
                                                @{
                                                    string badgeClass = "bg-secondary";
                                                    
                                                    if (voucher.Status == "Active")
                                                        badgeClass = "bg-success";
                                                    else if (voucher.Status == "Expired")
                                                        badgeClass = "bg-danger";
                                                    else if (voucher.Status == "Used")
                                                        badgeClass = "bg-warning";
                                                }
                                                <span class="badge @badgeClass">@voucher.Status</span>
                                            </td>
                                            <td>
                                                <div class="action-buttons">
                                                    <button class="btn btn-sm btn-outline-primary" title="Edit" @onclick="() => EditVoucher(voucher)">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick="() => ConfirmDelete(voucher)">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-between align-items-center mt-4">
                            <div class="text-muted">
                                Showing @GetFilteredVouchers().Count() of @vouchers.Count vouchers
                            </div>
                            <nav aria-label="Voucher pagination">
                                <ul class="pagination mb-0">
                                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
                                    </li>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        var pageNumber = i;
                                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                                        </li>
                                    }
                                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
                                    </li>
                                </ul>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (showVoucherModal)
        {
            <div class="modal fade show" style="display: block;" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@(isEditMode ? "Edit Voucher" : "Create New Voucher")</h5>
                            <button type="button" class="btn-close" @onclick="CloseVoucherModal"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@currentVoucher" OnValidSubmit="SaveVoucher">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                
                                <div class="row g-3">
                                    <div class="col-md-6">
                                        <label for="code" class="form-label">Voucher Code</label>
                                        <div class="input-group">
                                            <InputText id="code" @bind-Value="currentVoucher.Code" class="form-control" disabled="@isEditMode" />
                                            @if (!isEditMode)
                                            {
                                                <button type="button" class="btn btn-outline-secondary" @onclick="GenerateVoucherCode">
                                                    <i class="bi bi-shuffle"></i>
                                                </button>
                                            }
                                        </div>
                                        <ValidationMessage For="@(() => currentVoucher.Code)" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <label for="type" class="form-label">Discount Type</label>
                                        <InputSelect id="type" @bind-Value="currentVoucher.Type" class="form-select">
                                            <option value="Percentage">Percentage Discount</option>
                                            <option value="Fixed">Fixed Amount Discount</option>
                                            <option value="Shipping">Free Shipping</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => currentVoucher.Type)" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <label for="discountValue" class="form-label">
                                            @(currentVoucher.Type == "Percentage" ? "Discount Percentage" : 
                                              currentVoucher.Type == "Fixed" ? "Discount Amount" : "Free Shipping")
                                        </label>
                                        <div class="input-group">
                                            @if (currentVoucher.Type == "Percentage")
                                            {
                                                <InputNumber id="discountValue" @bind-Value="currentVoucher.DiscountValue" class="form-control" />
                                                <span class="input-group-text">%</span>
                                            }
                                            else if (currentVoucher.Type == "Fixed")
                                            {
                                                <span class="input-group-text">$</span>
                                                <InputNumber id="discountValue" @bind-Value="currentVoucher.DiscountValue" class="form-control" />
                                            }
                                            else
                                            {
                                                <input type="text" class="form-control" value="Free Shipping" disabled />
                                            }
                                        </div>
                                        <ValidationMessage For="@(() => currentVoucher.DiscountValue)" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <label for="minOrderValue" class="form-label">Minimum Order Value</label>
                                        <div class="input-group">
                                            <span class="input-group-text">$</span>
                                            <InputNumber id="minOrderValue" @bind-Value="currentVoucher.MinOrderValue" class="form-control" />
                                        </div>
                                        <ValidationMessage For="@(() => currentVoucher.MinOrderValue)" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <label for="validFrom" class="form-label">Valid From</label>
                                        <InputDate id="validFrom" @bind-Value="currentVoucher.ValidFrom" class="form-control" />
                                        <ValidationMessage For="@(() => currentVoucher.ValidFrom)" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <label for="validTo" class="form-label">Valid To</label>
                                        <InputDate id="validTo" @bind-Value="currentVoucher.ValidTo" class="form-control" />
                                        <ValidationMessage For="@(() => currentVoucher.ValidTo)" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <label for="usageLimit" class="form-label">Usage Limit</label>
                                        <InputNumber id="usageLimit" @bind-Value="currentVoucher.UsageLimit" class="form-control" />
                                        <ValidationMessage For="@(() => currentVoucher.UsageLimit)" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <label for="status" class="form-label">Status</label>
                                        <InputSelect id="status" @bind-Value="currentVoucher.Status" class="form-select">
                                            <option value="Active">Active</option>
                                            <option value="Inactive">Inactive</option>
                                        </InputSelect>
                                        <ValidationMessage For="@(() => currentVoucher.Status)" />
                                    </div>
                                    
                                    <div class="col-md-12">
                                        <label for="description" class="form-label">Description</label>
                                        <InputTextArea id="description" @bind-Value="currentVoucher.Description" class="form-control" rows="3" />
                                        <ValidationMessage For="@(() => currentVoucher.Description)" />
                                    </div>
                                </div>
                                
                                <div class="d-flex justify-content-end mt-4">
                                    <button type="button" class="btn btn-outline-secondary me-2" @onclick="CloseVoucherModal">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Save Voucher</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }

        @if (showDeleteConfirm)
        {
            <div class="modal fade show" style="display: block;" tabindex="-1">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Confirm Delete</h5>
                            <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                        </div>
                        <div class="modal-body">
                            <p>Are you sure you want to delete voucher <strong>@voucherToDelete?.Code</strong>?</p>
                            <p class="text-danger">This action cannot be undone.</p>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                            <button type="button" class="btn btn-danger" @onclick="DeleteVoucher">Delete</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-backdrop fade show"></div>
        }
    </div>
</PageRedirector>

<style>
    .page-container {
        padding: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 0;
        color: #333;
    }

    .search-group {
        max-width: 350px;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .table th {
        font-weight: 600;
        color: #555;
    }

    .card {
        border-radius: 0.5rem;
        border: 1px solid rgba(0,0,0,0.08);
        box-shadow: 0 4px 6px rgba(0,0,0,0.02);
    }
</style>

@code {
    private List<VoucherModel> vouchers = new List<VoucherModel>();
    private bool showVoucherModal = false;
    private bool showDeleteConfirm = false;
    private VoucherModel currentVoucher = new VoucherModel();
    private VoucherModel? voucherToDelete;
    private bool isEditMode = false;
    private string searchQuery = string.Empty;
    private string statusFilter = string.Empty;
    private string typeFilter = string.Empty;
    private int currentPage = 1;
    private int itemsPerPage = 10;
    private int totalPages => (int)Math.Ceiling(GetFilteredVouchers().Count() / (double)itemsPerPage);

    protected override void OnInitialized()
    {
        // Generate sample data for demonstration
        GenerateSampleVouchers();
    }

    private void GenerateSampleVouchers()
    {
        vouchers = new List<VoucherModel>
        {
            new VoucherModel
            {
                Id = 1,
                Code = "SUMMER2023",
                Description = "Summer sale discount",
                Type = "Percentage",
                DiscountValue = 15,
                MinOrderValue = 50,
                ValidFrom = new DateTime(2023, 6, 1),
                ValidTo = new DateTime(2023, 8, 31),
                UsageLimit = 1000,
                UsageCount = 458,
                Status = "Active"
            },
            new VoucherModel
            {
                Id = 2,
                Code = "WELCOME10",
                Description = "New customer discount",
                Type = "Fixed",
                DiscountValue = 10,
                MinOrderValue = 30,
                ValidFrom = new DateTime(2023, 1, 1),
                ValidTo = new DateTime(2023, 12, 31),
                UsageLimit = 500,
                UsageCount = 213,
                Status = "Active"
            },
            new VoucherModel
            {
                Id = 3,
                Code = "FREESHIP",
                Description = "Free shipping on all orders",
                Type = "Shipping",
                DiscountValue = 0,
                MinOrderValue = 75,
                ValidFrom = new DateTime(2023, 5, 15),
                ValidTo = new DateTime(2023, 6, 15),
                UsageLimit = 200,
                UsageCount = 200,
                Status = "Used"
            },
            new VoucherModel
            {
                Id = 4,
                Code = "FLASH25",
                Description = "Flash sale 25% off",
                Type = "Percentage",
                DiscountValue = 25,
                MinOrderValue = 100,
                ValidFrom = new DateTime(2023, 4, 1),
                ValidTo = new DateTime(2023, 4, 2),
                UsageLimit = 300,
                UsageCount = 287,
                Status = "Expired"
            },
            new VoucherModel
            {
                Id = 5,
                Code = "HOLIDAY50",
                Description = "Holiday season special discount",
                Type = "Fixed",
                DiscountValue = 50,
                MinOrderValue = 200,
                ValidFrom = new DateTime(2023, 11, 20),
                ValidTo = new DateTime(2023, 12, 25),
                UsageLimit = 1000,
                UsageCount = 0,
                Status = "Inactive"
            }
        };
    }

    private IEnumerable<VoucherModel> GetFilteredVouchers()
    {
        return vouchers
            .Where(v => string.IsNullOrEmpty(searchQuery) || 
                    v.Code.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) || 
                    v.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            .Where(v => string.IsNullOrEmpty(statusFilter) || v.Status == statusFilter)
            .Where(v => string.IsNullOrEmpty(typeFilter) || v.Type == typeFilter)
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void GoToPage(int page)
    {
        currentPage = page;
    }

    private void ShowCreateVoucherModal()
    {
        isEditMode = false;
        currentVoucher = new VoucherModel
        {
            ValidFrom = DateTime.Today,
            ValidTo = DateTime.Today.AddMonths(1),
            Status = "Active",
            Type = "Percentage",
            UsageLimit = 100
        };
        showVoucherModal = true;
    }

    private void EditVoucher(VoucherModel voucher)
    {
        isEditMode = true;
        currentVoucher = new VoucherModel
        {
            Id = voucher.Id,
            Code = voucher.Code,
            Description = voucher.Description,
            Type = voucher.Type,
            DiscountValue = voucher.DiscountValue,
            MinOrderValue = voucher.MinOrderValue,
            ValidFrom = voucher.ValidFrom,
            ValidTo = voucher.ValidTo,
            UsageLimit = voucher.UsageLimit,
            UsageCount = voucher.UsageCount,
            Status = voucher.Status
        };
        showVoucherModal = true;
    }

    private void CloseVoucherModal()
    {
        showVoucherModal = false;
    }

    private void SaveVoucher()
    {
        if (isEditMode)
        {
            var index = vouchers.FindIndex(v => v.Id == currentVoucher.Id);
            if (index >= 0)
                vouchers[index] = currentVoucher;
        }
        else
        {
            currentVoucher.Id = vouchers.Count > 0 ? vouchers.Max(v => v.Id) + 1 : 1;
            currentVoucher.UsageCount = 0;
            vouchers.Add(currentVoucher);
        }

        showVoucherModal = false;
    }

    private void ConfirmDelete(VoucherModel voucher)
    {
        voucherToDelete = voucher;
        showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
        voucherToDelete = null;
    }

    private void DeleteVoucher()
    {
        if (voucherToDelete != null)
        {
            vouchers.RemoveAll(v => v.Id == voucherToDelete.Id);
        }
        showDeleteConfirm = false;
        voucherToDelete = null;
    }

    private void GenerateVoucherCode()
    {
        var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        var code = new string(Enumerable.Repeat(chars, 8)
            .Select(s => s[random.Next(s.Length)]).ToArray());
        
        currentVoucher.Code = code;
    }

    public class VoucherModel
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Voucher code is required")]
        [StringLength(20, MinimumLength = 3, ErrorMessage = "Code must be between 3 and 20 characters")]
        public string Code { get; set; } = string.Empty;

        [Required(ErrorMessage = "Description is required")]
        [StringLength(200, ErrorMessage = "Description cannot exceed 200 characters")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Discount type is required")]
        public string Type { get; set; } = "Percentage";

        [Range(0, 100, ErrorMessage = "For percentage discounts, value must be between 0 and 100")]
        public decimal DiscountValue { get; set; }

        [Range(0, 10000, ErrorMessage = "Minimum order value must be between 0 and 10,000")]
        public decimal MinOrderValue { get; set; }

        public DateTime ValidFrom { get; set; } = DateTime.Today;

        public DateTime ValidTo { get; set; } = DateTime.Today.AddMonths(1);

        [Range(1, int.MaxValue, ErrorMessage = "Usage limit must be at least 1")]
        public int UsageLimit { get; set; } = 100;

        public int UsageCount { get; set; }

        [Required(ErrorMessage = "Status is required")]
        public string Status { get; set; } = "Active";
    }
} 