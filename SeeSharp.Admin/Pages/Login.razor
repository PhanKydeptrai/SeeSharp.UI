@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<PageTitle>Admin Portal - Login</PageTitle>

<div class="login-container">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb" class="mb-4 breadcrumb-wrapper">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
            <li class="breadcrumb-item active" aria-current="page">Login</li>
        </ol>
    </nav>

    <div class="row justify-content-center">
        <div class="col-md-10 col-lg-8">
            <div class="login-card">
                <div class="row g-0 w-100">
                    <div class="col-lg-5 d-none d-lg-block position-relative">
                        <div class="login-banner">
                            <div class="overlay"></div>
                            <div class="banner-content">
                                <i class="bi bi-shield-lock display-1 mb-3 text-glow"></i>
                                <h3 class="fw-bold mb-3">Admin Portal</h3>
                                <p class="mb-4">Manage your store, products, and customer data in one place</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-7">
                        <div class="login-form-container">
                            <div class="text-center mb-4 d-lg-none">
                                <i class="bi bi-shield-lock display-5 text-primary"></i>
                            </div>
                            <h2 class="login-title text-center">Admin Login</h2>

                            @if (notificationStatus == NotificationStatus.Fail)
                            {
                                <div class="alert-custom alert-danger-custom fade show" style="@animationStyle" role="alert">
                                    <div class="alert-icon">
                                        <i class="bi bi-exclamation-triangle-fill"></i>
                                    </div>
                                    <div class="alert-message">
                                        Login failed! Invalid credentials.
                                    </div>
                                    <button type="button" class="alert-close" @onclick="CloseNotification">
                                        <i class="bi bi-x"></i>
                                    </button>
                                </div>
                            }

                            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" class="needs-validation">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger small mb-3" />

                                <div class="input-wrapper mb-4">
                                    <div class="form-floating">
                                        <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Email" />
                                        <label for="email">
                                            <i class="bi bi-envelope-fill me-2 text-primary"></i>Email
                                        </label>
                                    </div>
                                    <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small" />
                                </div>

                                <div class="input-wrapper mb-3">
                                    <div class="form-floating password-container">
                                        <InputText type="@(showPassword ? "text" : "password")" id="password" class="form-control password-input" @bind-Value="loginModel.Password" placeholder="Password" /> 
                                        <label for="password">
                                            <i class="bi bi-lock-fill me-2 text-primary"></i>Password
                                        </label>
                                        <button type="button" class="password-toggle" @onclick="TogglePasswordVisibility"> 
                                            <i class="bi @(showPassword ? "bi-eye-slash-fill" : "bi-eye-fill")"></i> 
                                        </button> 
                                    </div>
                                    <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small" /> 
                                </div>

                                <div class="d-flex justify-content-between align-items-center mb-4">
                                    <a href="/forgot-password" class="forgot-password">Forgot password?</a>
                                </div>

                                <button type="submit" class="btn-login">
                                    @if (isLoggingIn)
                                    {
                                        <div class="d-flex align-items-center justify-content-center">
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <span>Logging in...</span>
                                        </div>
                                    }
                                    else
                                    {
                                        <span>Login</span>
                                        <i class="bi bi-box-arrow-in-right ms-2"></i>
                                    }
                                </button>
                            </EditForm>

                            <div class="text-center mt-4">
                                <p class="mb-0 security-note">
                                    <i class="bi bi-shield-lock-fill me-1 text-primary"></i>
                                    Secure administrative access
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Main container */
    .login-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1.5rem;
    }

    /* Breadcrumb styling */
    .breadcrumb-wrapper {
        margin-bottom: 2rem;
    }

    .breadcrumb-item a {
        color: #6c757d;
        text-decoration: none;
        font-weight: 500;
        transition: color 0.3s ease;
    }

    .breadcrumb-item a:hover {
        color: #4361ee;
    }

    .breadcrumb-item.active {
        color: #212529;
        font-weight: 600;
    }

    /* Login card styling */
    .login-card {
        border: none;
        border-radius: 1.25rem;
        overflow: hidden;
        box-shadow: 0 15px 35px rgba(50, 50, 93, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        background-color: #fff;
        height: auto;
        display: flex;
    }

    .login-card:hover {
        box-shadow: 0 20px 40px rgba(50, 50, 93, 0.15), 0 10px 20px rgba(0, 0, 0, 0.1);
        transform: translateY(-5px);
    }

    /* Banner section */
    .login-banner {
        height: 100%;
        background-image: url('https://images.unsplash.com/photo-1565373987291-4d7424dd9e59?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80');
        background-size: cover;
        background-position: center;
        position: relative;
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, rgba(67, 97, 238, 0.9) 0%, rgba(58, 12, 163, 0.85) 100%);
    }

    .banner-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: white;
        width: 90%;
        z-index: 1;
    }

    .text-glow {
        text-shadow: 0 0 20px rgba(255, 255, 255, 0.7);
    }

    /* Form container */
    .login-form-container {
        padding: 3.5rem 2.5rem;
        background-color: #fff;
    }

    .login-title {
        font-weight: 700;
        margin-bottom: 2.5rem;
        color: #212529;
        position: relative;
        display: inline-block;
        left: 50%;
        transform: translateX(-50%);
    }

    .login-title:after {
        content: '';
        position: absolute;
        width: 40%;
        height: 4px;
        background: linear-gradient(90deg, #4361ee, #3a0ca3);
        bottom: -12px;
        left: 30%;
        border-radius: 4px;
    }

    /* Form elements */
    .input-wrapper {
        margin-bottom: 1.75rem;
        position: relative;
    }

    .form-floating {
        position: relative;
    }

    .form-floating > .form-control {
        height: calc(3.5rem + 2px);
        line-height: 1.25;
        padding: 1rem 0.75rem;
        border-radius: 0.75rem;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .form-floating > label {
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        padding: 1rem 0.75rem;
        pointer-events: none;
        border: 1px solid transparent;
        transform-origin: 0 0;
        transition: opacity 0.2s ease-in-out, transform 0.2s ease-in-out;
        color: #6c757d;
    }

    .form-floating > .form-control:focus ~ label,
    .form-floating > .form-control:not(:placeholder-shown) ~ label {
        opacity: 0.8;
        transform: scale(0.85) translateY(-0.75rem) translateX(0.15rem);
        background-color: #fff;
        padding: 0 0.5rem;
        height: auto;
        border-radius: 4px;
        z-index: 5;
        color: #4361ee;
        font-weight: 500;
    }

    .form-control {
        border: 2px solid #e9ecef;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
        font-size: 1rem;
        color: #495057;
    }

    .form-control:focus {
        box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
        border-color: #4361ee;
        background-color: #fff;
    }

    .password-container {
        position: relative;
    }
    
    .password-input {
        padding-right: 50px !important;
    }
    
    .password-toggle {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        background-color: transparent;
        border: none;
        padding: 0.5rem;
        color: #6c757d;
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 5;
        border-radius: 50%;
        width: 35px;
        height: 35px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .password-toggle:hover {
        color: #4361ee;
        background-color: rgba(67, 97, 238, 0.1);
    }

    .forgot-password {
        font-size: 0.95rem;
        font-weight: 600;
        color: #4361ee;
        text-decoration: none;
        transition: all 0.3s ease;
        position: relative;
        display: inline-block;
    }

    .forgot-password:after {
        content: '';
        position: absolute;
        width: 0;
        height: 2px;
        bottom: -2px;
        left: 0;
        background-color: #4361ee;
        transition: width 0.3s ease;
    }

    .forgot-password:hover {
        color: #3a0ca3;
    }

    .forgot-password:hover:after {
        width: 100%;
    }

    /* Login button */
    .btn-login {
        width: 100%;
        padding: 0.9rem;
        border-radius: 0.75rem;
        background: linear-gradient(45deg, #4361ee, #3a0ca3);
        color: white;
        font-weight: 600;
        font-size: 1.05rem;
        border: none;
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: center;
        align-items: center;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        z-index: 1;
        letter-spacing: 0.5px;
    }

    .btn-login:before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(45deg, #3a0ca3, #4361ee);
        transition: all 0.4s ease;
        z-index: -1;
    }

    .btn-login:hover:before {
        left: 0;
    }

    .btn-login:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 20px rgba(67, 97, 238, 0.4);
    }
    
    .btn-login:active {
        transform: translateY(-1px);
        box-shadow: 0 5px 10px rgba(67, 97, 238, 0.4);
    }

    /* Alert styles */
    .alert-custom {
        position: relative;
        padding: 1rem 1.5rem;
        border-radius: 0.75rem;
        margin-bottom: 1.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .alert-danger-custom {
        background-color: #fff5f5;
        border-left: 5px solid #e63946;
        color: #e63946;
    }

    .alert-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 38px;
        height: 38px;
        background-color: rgba(230, 57, 70, 0.15);
        border-radius: 50%;
        margin-right: 1rem;
    }

    .alert-danger-custom .alert-icon i {
        color: #e63946;
        font-size: 1.2rem;
    }

    .alert-message {
        font-weight: 600;
        font-size: 1.05rem;
        flex-grow: 1;
        text-align: center;
    }

    .alert-close {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        padding: 0.5rem;
        background: transparent;
        border: none;
        cursor: pointer;
        color: #e63946;
        opacity: 0.7;
        font-size: 1.1rem;
        transition: all 0.3s ease;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .alert-close:hover {
        opacity: 1;
        background-color: rgba(230, 57, 70, 0.1);
    }

    /* Security note */
    .security-note {
        color: #6c757d;
        font-size: 0.95rem;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .security-note:hover i {
        color: #3a0ca3;
        transform: scale(1.2);
    }
    
    .security-note i {
        color: #4361ee;
        transition: all 0.3s ease;
    }

    /* Layout fixes */
    .row.g-0 {
        display: flex;
        flex-wrap: wrap;
    }

    .row.g-0 > div {
        display: flex;
        flex-direction: column;
    }

    .row.g-0.w-100 {
        margin: 0;
    }
    
    .col-lg-5, .col-lg-7 {
        padding: 0;
    }
    
    /* Validation messages */
    .validation-message {
        font-size: 0.85rem;
        margin-top: 0.375rem;
        display: block;
        color: #e63946;
        font-weight: 500;
    }

    /* Spinner animation */
    .spinner-border {
        vertical-align: -0.125em;
        border-width: 0.2em;
        animation-duration: 0.75s;
    }

    /* Media queries */
    @@media (max-width: 991.98px) {
        .login-form-container {
            padding: 2.5rem 2rem;
        }
    }

    @@media (max-width: 767.98px) {
        .login-card {
            margin: 1rem;
            border-radius: 1rem;
        }
        
        .form-floating > .form-control {
            height: calc(3.25rem + 2px);
        }
        
        .login-form-container {
            padding: 2rem 1.5rem;
        }
        
        .login-title {
            margin-bottom: 2rem;
        }
    }

    @@media (max-width: 575.98px) {
        .login-container {
            margin: 1rem auto;
            padding: 0 1rem;
        }
        
        .breadcrumb-wrapper {
            margin-bottom: 1.5rem;
        }
    }
</style>

@code {
    private LoginModel loginModel = new();
    private bool showPassword = false;
    private bool isLoggingIn = false;
    private string errorMessage = string.Empty;
    public NotificationStatus notificationStatus = NotificationStatus.None;
    private string animationStyle = "opacity: 0; transform: translateY(-20px);";

    public enum NotificationStatus
    {
        None = 0,
        Success = 1,
        Fail = 2
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void CloseNotification()
    {
        notificationStatus = NotificationStatus.None;
        animationStyle = "opacity: 0; transform: translateY(-20px); transition: opacity 0.5s ease, transform 0.5s ease;";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (notificationStatus == NotificationStatus.Fail)
        {
            await Task.Delay(50);
            animationStyle = "opacity: 1; transform: translateY(0); transition: all 0.5s ease-out;";
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);

        // Check if user is already authenticated
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/");
            return;
        }

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var accessToken))
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("refreshToken", out var refreshToken))
                if (!string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(refreshToken))
                {
                    // Save accessToken and refreshToken to LocalStorage
                    await LocalStorage.SetItemAsStringAsync("accessToken", accessToken);
                    await LocalStorage.SetItemAsStringAsync("refreshToken", refreshToken);

                    await AuthStateProvider.GetAuthenticationStateAsync();
                    // Redirect to main page
                    Navigation.NavigateTo("/");
                }

        isLoggingIn = false;
    }

    private async Task HandleLogin()
    {
        isLoggingIn = true;

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7222/api/employees/sign-in", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null)
                {
                    // Save tokens to LocalStorage
                    await LocalStorage.SetItemAsStringAsync("accessToken", result.accessToken);
                    await LocalStorage.SetItemAsStringAsync("refreshToken", result.refreshToken);

                    // Navigate to main dashboard
                    await AuthStateProvider.GetAuthenticationStateAsync();
                    Navigation.NavigateTo("/");
                }
            }
            else
            {
                // Handle login error
                errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Login failed: {errorMessage}");
                notificationStatus = NotificationStatus.Fail;
                animationStyle = "opacity: 0; transform: translateY(-20px);";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            notificationStatus = NotificationStatus.Fail;
            StartNotificationAnimation();
        }

        isLoggingIn = false;
    }

    private void StartNotificationAnimation()
    {
        animationStyle = "opacity: 1; transform: translateY(0); transition: opacity 0.5s ease, transform 0.5s ease;";
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters")]
        public string Password { get; set; } = string.Empty;
    }

    public class LoginResponse
    {
        public string accessToken { get; set; } = string.Empty;
        public string refreshToken { get; set; } = string.Empty;
    }
} 