@page "/products/{ProductId}"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@attribute [Authorize]

<PageTitle>Product Details - Admin Dashboard</PageTitle>

<PageRedirector>
    <div class="page-container">
        @if (isLoading)
        {
            <div class="d-flex justify-content-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (product == null)
        {
            <div class="alert alert-danger">
                <h4 class="alert-heading">Product Not Found</h4>
                <p>The requested product could not be found or has been deleted.</p>
                <hr />
                <p class="mb-0">
                    <button class="btn btn-outline-primary" @onclick="GoBackToProducts">
                        <i class="bi bi-arrow-left me-2"></i>Back to Products
                    </button>
                </p>
            </div>
        }
        else
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center">
                        <h1 class="page-title">
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="GoBackToProducts">
                                <i class="bi bi-arrow-left"></i>
                            </button>
                            Product Details
                        </h1>
                        <div>
                            <button class="btn btn-outline-primary me-2" @onclick="OpenUpdateModal">
                                <i class="bi bi-pencil me-2"></i>Update Product
                            </button>
                            
                            <button class="btn btn-outline-danger" @onclick="ConfirmDeleteProduct">
                                <i class="bi bi-trash me-2"></i>Delete Product
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-12 col-lg-5 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <div class="product-image @(string.IsNullOrEmpty(product.ImageUrl) ? "no-image" : "")">
                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                {
                                    <img src="@product.ImageUrl" alt="@product.ProductName" />
                                }
                                else
                                {
                                    <div class="no-image-placeholder">
                                        <i class="bi bi-image"></i>
                                        <p>No image available</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-12 col-lg-7 mb-4">
                    <div class="card h-100">
                        <div class="card-body">
                            <h2 class="product-name">@product.ProductName</h2>
                            
                            <div class="product-meta">
                                <div class="meta-item">
                                    <span class="meta-label">Product ID:</span>
                                    <span class="meta-value">@product.ProductId</span>
                                </div>
                                <div class="meta-item">
                                    <span class="meta-label">Base Variant ID:</span>
                                    <span class="meta-value">@product.BaseVariantId</span>
                                </div>
                                <div class="meta-item">
                                    <span class="meta-label">Category:</span>
                                    <span class="meta-value">@product.CategoryName</span>
                                </div>
                                <div class="meta-item">
                                    <span class="meta-label">Status:</span>
                                    <span class="badge @(product.Status == "InStock" ? "bg-success" : "bg-danger")">
                                        @(product.Status == "InStock" ? "In Stock" : "Out of Stock")
                                    </span>
                                </div>
                            </div>
                            
                            <div class="product-description mt-4">
                                <h4>Description</h4>
                                <p>@(string.IsNullOrEmpty(product.Description) ? "No description available" : product.Description)</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="mb-0">Product Variants</h3>
                        </div>
                        <div class="card-body">
                            @if (product.Variants == null || !product.Variants.Any())
                            {
                                <div class="alert alert-info">
                                    This product has no variants.
                                </div>
                            }
                            else
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th style="width: 80px">Image</th>
                                                <th>Variant Name</th>
                                                <th>Color</th>
                                                <th>Price</th>
                                                <th>Description</th>
                                                <th>Base Variant</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var variant in product.Variants)
                                            {
                                                <tr>
                                                    <td>
                                                        <div class="variant-image-small" style="@(string.IsNullOrEmpty(variant.ImageUrl) ? "" : $"background-image: url('{variant.ImageUrl}')")"></div>
                                                    </td>
                                                    <td>@variant.VariantName</td>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <div class="color-square" style="background-color: @variant.ColorCode"></div>
                                                            <span class="ms-2">@variant.ColorCode</span>
                                                        </div>
                                                    </td>
                                                    <td>@variant.Price.ToString("C0")</td>
                                                    <td>@(string.IsNullOrEmpty(variant.Description) ? "-" : variant.Description)</td>
                                                    <td>
                                                        @if (variant.IsBaseVariant)
                                                        {
                                                            <span class="badge bg-primary">Base Variant</span>
                                                        }
                                                        else
                                                        {
                                                            <span>-</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Toast notifications -->
    @if (showToast)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show toast-custom @(isToastVisible ? "toast-visible" : "toast-hidden")" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header @toastHeaderClass">
                    <i class="bi @toastIcon me-2"></i>
                    <strong class="me-auto">@toastTitle</strong>
                    <small>just now</small>
                    <button type="button" class="btn-close" @onclick="CloseToast"></button>
                </div>
                <div class="toast-body">
                    @toastMessage
                </div>
            </div>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (isDeleteConfirmOpen)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="CloseDeleteConfirm"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete product <strong>@product.ProductName</strong>?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirm">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeleteProduct" disabled="@isDeleting">
                            @if (isDeleting)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Deleting...</span>
                            }
                            else
                            {
                                <span>Delete Product</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }

    <!-- Update Product Modal -->
    @if (isUpdateModalOpen && product != null)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Update Product</h5>
                        <button type="button" class="btn-close" @onclick="CloseUpdateModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="updateProductDto" OnValidSubmit="HandleValidSubmit" enctype="multipart/form-data">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger mb-3" />

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="productName" class="form-label">Product Name</label>
                                    <InputText id="productName" class="form-control" @bind-Value="updateProductDto.ProductName" />
                                    <ValidationMessage For="@(() => updateProductDto.ProductName)" />
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    <label for="productPrice" class="form-label">Price</label>
                                    <InputNumber id="productPrice" class="form-control" @bind-Value="updateProductDto.ProductPrice" />
                                    <ValidationMessage For="@(() => updateProductDto.ProductPrice)" />
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="colorCode" class="form-label">Color Code</label>
                                    <div class="input-group">
                                        <InputText id="colorCode" class="form-control" @bind-Value="updateProductDto.ColorCode" placeholder="#RRGGBB" />
                                        <span class="input-group-text">
                                            <div class="color-square" style="background-color: @updateProductDto.ColorCode"></div>
                                        </span>
                                    </div>
                                    <ValidationMessage For="@(() => updateProductDto.ColorCode)" />
                                    <small class="form-text text-muted">Enter a valid color code (e.g., #FF5733)</small>
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    <label for="categoryId" class="form-label">Category</label>
                                    <InputSelect id="categoryId" class="form-select" @bind-Value="updateProductDto.CategoryId">
                                        @if (categories != null)
                                        {
                                            @foreach (var category in categories)
                                            {
                                                <option value="@category.CategoryId">@category.CategoryName</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => updateProductDto.CategoryId)" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" class="form-control" rows="4" @bind-Value="updateProductDto.Description" />
                                <ValidationMessage For="@(() => updateProductDto.Description)" />
                            </div>

                            <div class="mb-3">
                                <label for="productImage" class="form-label">Product Image</label>
                                <InputFile id="productImage" OnChange="OnFileSelected" class="form-control" accept="image/*" />
                                <small class="form-text text-muted">Upload a new image or leave empty to keep the current one</small>
                                
                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                {
                                    <div class="mt-2">
                                        <span>Current image:</span>
                                        <div class="thumbnail-preview mt-1">
                                            <img src="@product.ImageUrl" alt="Current product image" />
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="CloseUpdateModal">Cancel</button>
                                <button type="submit" class="btn btn-primary" disabled="@isUpdating">
                                    @if (isUpdating)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        <span>Updating...</span>
                                    }
                                    else
                                    {
                                        <span>Save Changes</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</PageRedirector>

<style>
    .page-container {
        padding: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 0;
        color: #333;
    }

    .product-image {
        width: 100%;
        height: 340px;
        background-color: #f8f9fa;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }

    .product-image img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .no-image-placeholder {
        text-align: center;
        color: #adb5bd;
    }

    .no-image-placeholder i {
        font-size: 4rem;
        margin-bottom: 1rem;
    }

    .product-name {
        font-size: 1.8rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #333;
    }

    .product-meta {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .meta-item {
        display: flex;
        flex-direction: column;
    }

    .meta-label {
        font-size: 0.85rem;
        font-weight: 600;
        color: #6c757d;
        margin-bottom: 0.25rem;
    }

    .meta-value {
        font-size: 1rem;
        word-break: break-word;
    }

    .product-description h4 {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.75rem;
        color: #333;
    }

    .card {
        border-radius: 0.5rem;
        border: 1px solid rgba(0,0,0,0.08);
        box-shadow: 0 4px 6px rgba(0,0,0,0.02);
        height: 100%;
    }

    .card-header {
        background-color: rgba(0,0,0,0.03);
        border-bottom: 1px solid rgba(0,0,0,0.08);
        padding: 1rem 1.25rem;
    }

    .card-header h3 {
        font-size: 1.25rem;
        font-weight: 600;
        color: #333;
    }

    .variant-image-small {
        width: 50px;
        height: 40px;
        background-color: #f0f0f0;
        border-radius: 6px;
        background-image: url('https://via.placeholder.com/50x40');
        background-size: cover;
        background-position: center;
    }

    .color-square {
        width: 20px;
        height: 20px;
        border-radius: 4px;
        border: 1px solid rgba(0,0,0,0.1);
    }

    .toast-container {
        z-index: 1050;
    }
    
    .bg-success-light {
        background-color: rgba(25, 135, 84, 0.2);
        color: #198754;
    }
    
    .bg-danger-light {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
    }
    
    .toast-custom {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
        border: none;
        border-radius: 10px;
        overflow: hidden;
        min-width: 300px;
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    }
    
    .toast-hidden {
        transform: translateX(100%);
        opacity: 0;
    }
    
    .toast-visible {
        transform: translateX(0);
        opacity: 1;
    }
    
    .toast-header {
        border-bottom: none;
        padding: 0.75rem 1rem;
    }
    
    .toast-body {
        padding: 0.75rem 1rem 1rem;
        font-size: 0.95rem;
    }

    /* Modal background override for better spacing */
    .modal-backdrop {
        background-color: rgba(0,0,0,0.5);
    }

    /* Modal animations */
    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
    }

    .modal.show .modal-dialog {
        transform: none;
    }

    .thumbnail-preview {
        width: 100px;
        height: 100px;
        border-radius: 4px;
        overflow: hidden;
        border: 1px solid #dee2e6;
    }
    
    .thumbnail-preview img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
</style>

@code {
    [Parameter]
    public string ProductId { get; set; }
    
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    
    [Inject]
    private HttpClient HttpClient { get; set; }
    
    private ProductDto product;
    private bool isLoading = true;
    
    // Update product modal properties
    private bool isUpdateModalOpen = false;
    private bool isUpdating = false;
    private UpdateProductDto updateProductDto = new();
    
    // Delete confirmation modal properties
    private bool isDeleteConfirmOpen = false;
    private bool isDeleting = false;
    
    // Toast notification properties
    private bool showToast = false;
    private bool isToastVisible = false;
    private string toastTitle = "";
    private string toastMessage = "";
    private string toastHeaderClass = "";
    private string toastIcon = "";
    private System.Threading.Timer toastTimer;
    
    private List<CategoryDto> categories;
    private IBrowserFile selectedFile;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await LoadProductAsync();
    }
    
    private async Task LoadProductAsync()
    {
        isLoading = true;
        
        try
        {
            product = await HttpClient.GetFromJsonAsync<ProductDto>($"https://localhost:7222/api/products/{ProductId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product: {ex.Message}");
            ShowErrorToast("Error", "Failed to load product details. Please try again.");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task LoadCategoriesAsync()
    {
        try
        {
            categories = await HttpClient.GetFromJsonAsync<List<CategoryDto>>("https://localhost:7222/api/categories/info");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            ShowErrorToast("Error", "Failed to load categories. Please refresh the page.");
        }
    }
    
    private void GoBackToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }
    
    private void EditProduct(string productId)
    {
        NavigationManager.NavigateTo($"/products/{productId}/edit");
    }
    
    private async Task ToggleProductStatus(ProductDto product)
    {
        string newStatus = product.Status == "InStock" ? "OutOfStock" : "InStock";
        
        try
        {
            HttpResponseMessage response;
            
            if (newStatus == "InStock")
            {
                // Use PATCH to restore product
                var request = new HttpRequestMessage(HttpMethod.Patch, $"https://localhost:7222/api/products/{product.ProductId}/restore");
                response = await HttpClient.SendAsync(request);
            }
            else
            {
                // Use PUT to mark as out of stock
                response = await HttpClient.PutAsJsonAsync($"https://localhost:7222/api/products/{product.ProductId}/status", new { status = "OutOfStock" });
            }
            
            if (response.IsSuccessStatusCode)
            {
                string statusMessage = newStatus == "InStock" ? "restored to stock" : "marked as out of stock";
                ShowSuccessToast("Success", $"Product '{product.ProductName}' has been {statusMessage}.");
                
                // Refresh the product after successful status update
                await LoadProductAsync();
            }
            else
            {
                ShowErrorToast("Error", $"Failed to update product status. Status: {response.StatusCode}");
                Console.WriteLine($"Error updating product status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Error", "An error occurred while updating the product status.");
            Console.WriteLine($"Exception when updating product status: {ex.Message}");
        }
    }

    private void OpenUpdateModal()
    {
        // Initialize update DTO with current product values
        updateProductDto = new UpdateProductDto
        {
            ProductId = product.ProductId,
            ProductName = product.ProductName,
            Description = product.Description,
            ProductPrice = product.PriceOfBaseVariant,
            ColorCode = product.Variants?.FirstOrDefault()?.ColorCode ?? "#000000",
            CategoryId = product.CategoryId
        };
        
        isUpdateModalOpen = true;
    }
    
    private void CloseUpdateModal()
    {
        isUpdateModalOpen = false;
    }
    
    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }
    
    private async Task HandleValidSubmit()
    {
        isUpdating = true;
        
        try
        {
            // Log the selected category ID for debugging
            Console.WriteLine($"Updating product with CategoryId: {updateProductDto.CategoryId}");
            
            // Create a MultipartFormDataContent for sending the image file
            using var content = new MultipartFormDataContent();
            
            // Add all product details as form values
            content.Add(new StringContent(updateProductDto.ProductName), "productName");
            content.Add(new StringContent(updateProductDto.Description ?? string.Empty), "description");
            content.Add(new StringContent(updateProductDto.ProductPrice.ToString()), "productPrice");
            content.Add(new StringContent(updateProductDto.ColorCode ?? string.Empty), "colorCode");
            content.Add(new StringContent(updateProductDto.CategoryId), "categoryId");
            
            // Add the file if selected
            if (selectedFile != null)
            {
                // Read the file content
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 4 * 1024 * 1024)); // 4MB max
                
                // Add content type header
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
                
                // Add to the multipart content
                content.Add(
                    content: fileContent,
                    name: "productImage",
                    fileName: selectedFile.Name
                );
            }
            
            // Send the request
            var response = await HttpClient.PutAsync($"https://localhost:7222/api/products/{ProductId}", content);
            
            if (response.IsSuccessStatusCode)
            {
                ShowSuccessToast("Success", $"Product '{updateProductDto.ProductName}' has been updated successfully.");
                
                // Close the modal
                CloseUpdateModal();
                
                // Refresh the product data
                await LoadProductAsync();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowErrorToast("Error", $"Failed to update product. {errorContent}");
                Console.WriteLine($"Error updating product: {response.StatusCode}, {errorContent}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Error", "An error occurred while updating the product.");
            Console.WriteLine($"Exception when updating product: {ex.Message}");
        }
        finally
        {
            isUpdating = false;
        }
    }
    
    private async Task ShowWithAnimation()
    {
        // First set the initial state (hidden)
        toastTimer?.Dispose();
        showToast = true;
        isToastVisible = false;
        await InvokeAsync(StateHasChanged);
        
        // Short delay to ensure the DOM is updated and the transition will work
        await Task.Delay(50);
        
        // Now show with animation
        isToastVisible = true;
        await InvokeAsync(StateHasChanged);
    }
    
    private void ShowSuccessToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = "bg-success-light";
        toastIcon = "bi-check-circle";
        
        // Show toast with animation
        _ = ShowWithAnimation();
        
        // Auto-hide toast after 5 seconds
        SetupToastAutoHide();
    }
    
    private void ShowErrorToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = "bg-danger-light";
        toastIcon = "bi-exclamation-circle";
        
        // Show toast with animation
        _ = ShowWithAnimation();
        
        // Auto-hide toast after 5 seconds
        SetupToastAutoHide();
    }
    
    private async Task CloseToast()
    {
        // Animate out
        isToastVisible = false;
        await InvokeAsync(StateHasChanged);
        
        // Wait for animation to complete
        await Task.Delay(300);
        
        // Then hide the toast
        showToast = false;
        toastTimer?.Dispose();
        toastTimer = null;
        await InvokeAsync(StateHasChanged);
    }
    
    private void SetupToastAutoHide()
    {
        // Dispose of existing timer if there is one
        toastTimer?.Dispose();
        
        // Create a new timer that will hide the toast after 5 seconds
        toastTimer = new System.Threading.Timer(async _ => 
        {
            await CloseToast();
        }, null, 5000, System.Threading.Timeout.Infinite);
    }
    
    private void ConfirmDeleteProduct()
    {
        isDeleteConfirmOpen = true;
    }
    
    private void CloseDeleteConfirm()
    {
        isDeleteConfirmOpen = false;
    }
    
    private async Task DeleteProduct()
    {
        isDeleting = true;
        
        try
        {
            var response = await HttpClient.DeleteAsync($"https://localhost:7222/api/products/{product.ProductId}");
            
            if (response.IsSuccessStatusCode)
            {
                CloseDeleteConfirm();
                ShowSuccessToast("Success", $"Product '{product.ProductName}' has been deleted successfully.");
                
                // Navigate back to products list after a short delay
                await Task.Delay(1500);
                NavigationManager.NavigateTo("/products");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ShowErrorToast("Error", $"Failed to delete product. {errorContent}");
                Console.WriteLine($"Error deleting product: {response.StatusCode}, {errorContent}");
                isDeleting = false;
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Error", "An error occurred while deleting the product.");
            Console.WriteLine($"Exception when deleting product: {ex.Message}");
            isDeleting = false;
        }
    }
    
    public class ProductDto
    {
        public string ProductId { get; set; }
        public string BaseVariantId { get; set; }
        public string ProductName { get; set; }
        public decimal PriceOfBaseVariant { get; set; }
        public string ImageUrl { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public string CategoryName { get; set; }
        public string CategoryId { get; set; }
        public List<ProductVariantDto> Variants { get; set; } = new();
    }
    
    public class ProductVariantDto
    {
        public string ProductVariantId { get; set; }
        public string ProductId { get; set; }
        public string VariantName { get; set; }
        public string ColorCode { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string ImageUrl { get; set; }
        public bool IsBaseVariant { get; set; }
    }
    
    public class UpdateProductDto
    {
        public string ProductId { get; set; }
        
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Product name is required")]
        [System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "Product name cannot exceed 100 characters")]
        public string ProductName { get; set; }
        
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Price is required")]
        [System.ComponentModel.DataAnnotations.Range(0.01, 9999999, ErrorMessage = "Price must be greater than 0")]
        public decimal ProductPrice { get; set; }
        
        [System.ComponentModel.DataAnnotations.StringLength(7, ErrorMessage = "Color code cannot exceed 7 characters")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^#([A-Fa-f0-9]{6})$", ErrorMessage = "Please enter a valid color code (e.g., #FF5733)")]
        public string ColorCode { get; set; }
        
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Category is required")]
        public string CategoryId { get; set; }
        
        [System.ComponentModel.DataAnnotations.StringLength(500, ErrorMessage = "Description cannot exceed 500 characters")]
        public string Description { get; set; }
    }
    
    public class CategoryDto
    {
        public string CategoryId { get; set; }
        public string CategoryName { get; set; }
    }
} 