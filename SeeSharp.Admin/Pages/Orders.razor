@page "/orders"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@using System.Globalization
@attribute [Authorize]

<PageTitle>Orders - Admin Dashboard</PageTitle>

<PageRedirector>
    <div class="page-container">
        <div class="row mb-4">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center">
                    <h1 class="page-title">
                        <i class="bi bi-cart-check me-2"></i>Orders
                    </h1>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary">
                            <i class="bi bi-file-earmark-excel me-2"></i>Export
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <div class="input-group search-group">
                                <span class="input-group-text">
                                    <i class="bi bi-search"></i>
                                </span>
                                <input type="text" class="form-control" placeholder="Search orders..." 
                                       @bind="searchTerm" @bind:event="oninput" 
                                       @onkeyup="HandleSearchKeyUp">
                                @if (!string.IsNullOrWhiteSpace(searchTerm))
                                {
                                    <span class="input-group-text clear-search-btn" @onclick="ClearSearch">
                                        <i class="bi bi-x-circle"></i>
                                    </span>
                                }
                            </div>
                            <div class="d-flex gap-2">
                                <select class="form-select" @bind="selectedOrderStatus" @bind:after="StatusChanged">
                                    <option value="">All Statuses</option>
                                    <option value="New">New</option>
                                    <option value="Processing">Processing</option>
                                    <option value="Shipped">Shipped</option>
                                    <option value="Delivered">Delivered</option>
                                    <option value="Cancelled">Cancelled</option>
                                </select>
                                <select class="form-select" @onchange="OnSortOrderChanged">
                                    <option value="asc">Oldest First</option>
                                    <option value="desc">Newest First</option>
                                </select>
                                <button class="btn btn-outline-secondary">
                                    <i class="bi bi-funnel me-2"></i>Filter
                                </button>
                            </div>
                        </div>

                        @if (isLoading)
                        {
                            <div class="d-flex justify-content-center my-5">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else if (orderResponse?.Items?.Count == 0)
                        {
                            <div class="alert alert-info">
                                <h5 class="alert-heading">No orders found</h5>
                                @if (!string.IsNullOrWhiteSpace(searchTerm) || !string.IsNullOrWhiteSpace(selectedOrderStatus))
                                {
                                    <p>
                                        No orders match your filter criteria
                                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                                        {
                                            <span>with search term: <strong>"@searchTerm"</strong></span>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(selectedOrderStatus))
                                        {
                                            <span>
                                                with status: <strong>@selectedOrderStatus</strong>
                                            </span>
                                        }
                                    </p>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="ClearAllFilters">
                                        <i class="bi bi-arrow-clockwise me-1"></i>Clear all filters
                                    </button>
                                }
                                else
                                {
                                    <p>There are no orders available in the system.</p>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Order #</th>
                                            @* <th>Order Date</th> *@
                                            <th>Customer</th>
                                            <th>Total</th>
                                            <th>Status</th>
                                            <th>Payment</th>
                                            <th>Items</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var order in orderResponse?.Items ?? new List<OrderDto>())
                                        {
                                            <tr class="order-row" @onclick="() => NavigateToOrderDetail(order.OrderId)">
                                                <td class="fw-medium">@order.OrderId</td>
                                                @* <td>@order.OrderDate</td> *@
                                                <td>@order.CustomerName</td>
                                                <td>
                                                    @{
                                                        var vndCulture = new CultureInfo("vi-VN");
                                                        @string.Format(vndCulture, "{0:N0} VNƒê", order.Total)
                                                    }
                                                </td>
                                                <td>
                                                    @{
                                                        string statusClass = order.OrderStatus switch
                                                        {
                                                            "Delivered" => "bg-success",
                                                            "Shipped" => "bg-info",
                                                            "Processing" => "bg-warning",
                                                            "New" => "bg-secondary",
                                                            "Cancelled" => "bg-danger",
                                                            _ => "bg-secondary"
                                                        };
                                                    }
                                                    <span class="badge @statusClass">@order.OrderStatus</span>
                                                </td>
                                                <td>
                                                    <span class="badge bg-light text-dark">@(order.PaymentStatus == "None" ? "Pending" : order.PaymentStatus)</span>
                                                </td>
                                                <td>@(order.OrderDetails?.Count ?? 0) items</td>
                                                <td>
                                                    <div class="action-buttons">
                                                        <button class="btn btn-sm btn-outline-primary" title="View" @onclick:stopPropagation @onclick="() => ViewOrder(order.OrderId)">
                                                            <i class="bi bi-eye"></i>
                                                        </button>
                                                        @if (order.OrderStatus != "Cancelled")
                                                        {
                                                            <button class="btn btn-sm btn-outline-danger" title="Cancel" @onclick:stopPropagation @onclick="() => CancelOrder(order.OrderId)">
                                                                <i class="bi bi-x-circle"></i>
                                                            </button>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <div class="d-flex justify-content-between align-items-center mt-4">
                                <div class="text-muted">
                                    Showing @((orderResponse?.Page - 1) * orderResponse?.PageSize + 1) to @Math.Min(orderResponse?.Page * orderResponse?.PageSize ?? 0, orderResponse?.TotalCount ?? 0) of @orderResponse?.TotalCount entries
                                </div>
                                <nav aria-label="Order pagination">
                                    <ul class="pagination mb-0">
                                        <li class="page-item @(orderResponse?.HasPreviousPage != true ? "disabled" : "")">
                                            <a class="page-link" href="javascript:void(0)" @onclick="PreviousPage" tabindex="-1" aria-disabled="@(orderResponse?.HasPreviousPage != true)">Previous</a>
                                        </li>
                                        @{
                                            int totalPages = (int)Math.Ceiling((orderResponse?.TotalCount ?? 0) / (double)(orderResponse?.PageSize ?? 1));
                                            for (int i = 1; i <= totalPages; i++)
                                            {
                                                int pageNumber = i;
                                                <li class="page-item @(pageNumber == currentPage ? "active" : "")">
                                                    <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(pageNumber)">@pageNumber</a>
                                                </li>
                                            }
                                        }
                                        <li class="page-item @(orderResponse?.HasNextPage != true ? "disabled" : "")">
                                            <a class="page-link" href="javascript:void(0)" @onclick="NextPage">Next</a>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast notifications -->
    @if (showToast)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show toast-custom @(isToastVisible ? "toast-visible" : "toast-hidden")" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header @toastHeaderClass">
                    <i class="bi @toastIcon me-2"></i>
                    <strong class="me-auto">@toastTitle</strong>
                    <small>just now</small>
                    <button type="button" class="btn-close" @onclick="CloseToast"></button>
                </div>
                <div class="toast-body">
                    @toastMessage
                </div>
            </div>
        </div>
    }
</PageRedirector>

<style>
    .page-container {
        padding: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 0;
        color: #333;
    }

    .search-group {
        max-width: 350px;
    }

    .date-range {
        max-width: 450px;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .table th {
        font-weight: 600;
        color: #555;
    }

    .card {
        border-radius: 0.5rem;
        border: 1px solid rgba(0,0,0,0.08);
        box-shadow: 0 4px 6px rgba(0,0,0,0.02);
    }
    
    .order-row {
        cursor: pointer;
    }
    
    .order-row:hover {
        background-color: rgba(0,0,0,0.02);
    }
    
    .toast-container {
        z-index: 1050;
    }
    
    .bg-success-light {
        background-color: rgba(25, 135, 84, 0.2);
        color: #198754;
    }
    
    .bg-danger-light {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
    }
    
    .toast-custom {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
        border: none;
        border-radius: 10px;
        overflow: hidden;
        min-width: 300px;
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    }
    
    .toast-hidden {
        transform: translateX(100%);
        opacity: 0;
    }
    
    .toast-visible {
        transform: translateX(0);
        opacity: 1;
    }
    
    .toast-header {
        border-bottom: none;
        padding: 0.75rem 1rem;
    }
    
    .toast-body {
        padding: 0.75rem 1rem 1rem;
        font-size: 0.95rem;
    }

    .clear-search-btn {
        cursor: pointer;
        background-color: transparent;
        border-left: none;
    }

    .clear-search-btn:hover {
        color: #dc3545;
    }
</style>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }
    
    [Inject]
    private HttpClient HttpClient { get; set; }
    
    [Inject]
    private IJSRuntime JSRuntime { get; set; }
    
    private OrderResponseDto? orderResponse;
    private bool isLoading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private string searchTerm = "";
    private string selectedOrderStatus = "";
    private string sortOrder = "asc"; // Default sort order is ascending (oldest first)
    
    // Toast notification properties
    private bool showToast = false;
    private bool isToastVisible = false;
    private string toastTitle = "";
    private string toastMessage = "";
    private string toastHeaderClass = "";
    private string toastIcon = "";
    private System.Threading.Timer? toastTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }
    
    private async Task LoadOrdersAsync()
    {
        isLoading = true;
        
        try
        {
            var url = $"https://localhost:7222/api/orders/admin?page={currentPage}&pageSize={pageSize}&sortOrder={sortOrder}";
            
            // Add search term if provided
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                url += $"&searchTerm={Uri.EscapeDataString(searchTerm)}";
            }
            
            // Add status filter if selected using enum values
            if (!string.IsNullOrWhiteSpace(selectedOrderStatus))
            {
                int statusValue = selectedOrderStatus switch
                {
                    "New" => 1,
                    "Processing" => 2,
                    "Shipped" => 3,
                    "Delivered" => 4,
                    "Cancelled" => 5,
                    _ => 0
                };
                
                if (statusValue > 0)
                {
                    url += $"&statusFilter={statusValue}";
                }
            }
            
            Console.WriteLine($"Calling API: {url}");
            orderResponse = await HttpClient.GetFromJsonAsync<OrderResponseDto>(url);
            Console.WriteLine($"API returned {orderResponse?.Items?.Count ?? 0} orders");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading orders: {ex.Message}");
            ShowErrorToast("Error", "Failed to load orders. Please try again.");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task GoToPage(int page)
    {
        currentPage = page;
        await LoadOrdersAsync();
    }
    
    private async Task NextPage()
    {
        if (orderResponse?.HasNextPage == true)
        {
            currentPage++;
            await LoadOrdersAsync();
        }
    }
    
    private async Task PreviousPage()
    {
        if (orderResponse?.HasPreviousPage == true)
        {
            currentPage--;
            await LoadOrdersAsync();
        }
    }

    private async Task HandleSearchKeyUp(KeyboardEventArgs e)
    {
        // T√¨m ki·∫øm ngay l·∫≠p t·ª©c khi nh·∫•n Enter
        if (e.Key == "Enter")
        {
            currentPage = 1; // Reset v·ªÅ trang ƒë·∫ßu ti√™n cho t√¨m ki·∫øm m·ªõi
            await LoadOrdersAsync();
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        currentPage = 1;
        await LoadOrdersAsync();
    }
    
    private async Task ClearAllFilters()
    {
        searchTerm = "";
        selectedOrderStatus = "";
        currentPage = 1;
        await LoadOrdersAsync();
    }
    
    private void NavigateToOrderDetail(string orderId)
    {
        NavigationManager.NavigateTo($"/orders/{orderId}");
    }
    
    private void ViewOrder(string orderId)
    {
        NavigationManager.NavigateTo($"/orders/{orderId}");
    }
    
    private async Task CancelOrder(string orderId)
    {
        try
        {
            // Use DELETE to cancel order
            var response = await HttpClient.DeleteAsync($"https://localhost:7222/api/orders/{orderId}/cancel");
            
            if (response.IsSuccessStatusCode)
            {
                ShowSuccessToast("Success", $"Order #{orderId.Substring(0, 8)} has been cancelled.");
                
                // Refresh the order list after successful status update
                await LoadOrdersAsync();
            }
            else
            {
                ShowErrorToast("Error", $"Failed to cancel order. Status: {response.StatusCode}");
                Console.WriteLine($"Error cancelling order: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Error", "An error occurred while cancelling the order.");
            Console.WriteLine($"Exception when cancelling order: {ex.Message}");
        }
    }

    private async Task StatusChanged()
    {
        Console.WriteLine($"Status changed to: {selectedOrderStatus}");
        currentPage = 1;
        await LoadOrdersAsync();
    }
    
    private async Task OnSortOrderChanged(ChangeEventArgs e)
    {
        var order = e.Value?.ToString() ?? "asc";
        Console.WriteLine($"Sort order selected: {order}");
        
        sortOrder = order;
        currentPage = 1;
        
        await LoadOrdersAsync();
    }
    
    private async Task ShowWithAnimation()
    {
        // First set the initial state (hidden)
        toastTimer?.Dispose();
        showToast = true;
        isToastVisible = false;
        await InvokeAsync(StateHasChanged);
        
        // Short delay to ensure the DOM is updated and the transition will work
        await Task.Delay(50);
        
        // Now show with animation
        isToastVisible = true;
        await InvokeAsync(StateHasChanged);
    }
    
    private void ShowSuccessToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = "bg-success-light";
        toastIcon = "bi-check-circle";
        
        // Show toast with animation
        _ = ShowWithAnimation();
        
        // Auto-hide toast after 5 seconds
        SetupToastAutoHide();
    }
    
    private void ShowErrorToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = "bg-danger-light";
        toastIcon = "bi-exclamation-circle";
        
        // Show toast with animation
        _ = ShowWithAnimation();
        
        // Auto-hide toast after 5 seconds
        SetupToastAutoHide();
    }
    
    private async Task CloseToast()
    {
        // Animate out
        isToastVisible = false;
        await InvokeAsync(StateHasChanged);
        
        // Wait for animation to complete
        await Task.Delay(300);
        
        // Then hide the toast
        showToast = false;
        toastTimer?.Dispose();
        toastTimer = null;
        await InvokeAsync(StateHasChanged);
    }
    
    private void SetupToastAutoHide()
    {
        // Dispose of existing timer if there is one
        toastTimer?.Dispose();
        
        // Create a new timer that will hide the toast after 5 seconds
        toastTimer = new System.Threading.Timer(async _ => 
        {
            await CloseToast();
        }, null, 5000, System.Threading.Timeout.Infinite);
    }
    
    public class OrderDetailDto
    {
        public string OrderDetailId { get; set; }
        public string ProductId { get; set; }
        public string ProductName { get; set; }
        public string VariantName { get; set; }
        public string ColorCode { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
        public string ImageUrl { get; set; }
        public decimal Total { get; set; }
    }
    
    public class OrderDto
    {
        public string OrderId { get; set; }
        public string CustomerId { get; set; }
        public string CustomerName { get; set; }
        public DateTime OrderDate { get; set; }
        public decimal Total { get; set; }
        public string PaymentStatus { get; set; }
        public string OrderStatus { get; set; }
        public List<OrderDetailDto> OrderDetails { get; set; } = new();
    }
    
    public class OrderResponseDto
    {
        public List<OrderDto> Items { get; set; } = new();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
    }
} 
} 