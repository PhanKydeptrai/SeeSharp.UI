@page "/products/{ProductId}/edit"
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@attribute [Authorize]

<PageTitle>Edit Product - Admin Dashboard</PageTitle>

@{
    // Define VND culture info for price formatting
    var vndCulture = new CultureInfo("vi-VN");
}

<PageRedirector>
    <div class="page-container">
        @if (isLoading)
        {
            <div class="d-flex justify-content-center my-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (product == null)
        {
            <div class="alert alert-danger">
                <h4 class="alert-heading">Product Not Found</h4>
                <p>The requested product could not be found or has been deleted.</p>
                <hr />
                <p class="mb-0">
                    <button class="btn btn-outline-primary" @onclick="GoBackToProducts">
                        <i class="bi bi-arrow-left me-2"></i>Back to Products
                    </button>
                </p>
            </div>
        }
        else
        {
            <div class="row mb-4">
                <div class="col-12">
                    <div class="d-flex justify-content-between align-items-center">
                        <h1 class="page-title">
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="GoBackToProducts">
                                <i class="bi bi-arrow-left"></i>
                            </button>
                            Edit Product
                        </h1>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-8">
                    <div class="card">
                        <div class="card-body">
                            <EditForm Model="editProductDto" OnValidSubmit="HandleSubmit" FormName="productEditForm">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger mb-3" />

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            <label class="form-label">Product ID</label>
                                            <input type="text" class="form-control" value="@product.ProductId" disabled />
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            <label class="form-label">Category</label>
                                            <select class="form-select" @bind="editProductDto.CategoryId">
                                                @if (categories != null && categories.Any())
                                                {
                                                    @foreach (var category in categories)
                                                    {
                                                        <option value="@category.CategoryId">@category.CategoryName</option>
                                                    }
                                                }
                                                else
                                                {
                                                    <option value="">-- Select Category --</option>
                                                }
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            <label class="form-label" for="productName">Product Name</label>
                                            <InputText id="productName" class="form-control" @bind-Value="editProductDto.ProductName" />
                                            <ValidationMessage For="@(() => editProductDto.ProductName)" />
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            <label class="form-label" for="productPrice">Price (VNĐ)</label>
                                            <div class="input-group">
                                                <InputNumber id="productPrice" class="form-control" @bind-Value="editProductDto.ProductPrice" />
                                                <span class="input-group-text">VNĐ</span>
                                            </div>
                                            <small class="form-text text-muted">
                                                Current: @string.Format(vndCulture, "{0:N0} VNĐ", product.PriceOfBaseVariant)
                                            </small>
                                            <ValidationMessage For="@(() => editProductDto.ProductPrice)" />
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            <label class="form-label" for="colorCode">Color Code</label>
                                            <div class="input-group">
                                                <InputText id="colorCode" class="form-control" @bind-Value="editProductDto.ColorCode" />
                                                <span class="input-group-text">
                                                    <div class="color-preview" style="background-color: @editProductDto.ColorCode"></div>
                                                </span>
                                            </div>
                                            <ValidationMessage For="@(() => editProductDto.ColorCode)" />
                                        </div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <div class="form-group">
                                            <label class="form-label" for="productImage">Product Image</label>
                                            <InputFile id="productImage" OnChange="OnFileChange" class="form-control" accept="image/*" />
                                            <small class="form-text text-muted">Max file size: 5MB</small>
                                        </div>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="form-group">
                                        <label class="form-label" for="description">Description</label>
                                        <InputTextArea id="description" class="form-control" rows="4" @bind-Value="editProductDto.Description" />
                                        <ValidationMessage For="@(() => editProductDto.Description)" />
                                    </div>
                                </div>

                                <div class="d-flex justify-content-between mt-4">
                                    <button type="button" class="btn btn-outline-secondary" @onclick="GoBackToProducts">
                                        <i class="bi bi-x-lg me-2"></i>Cancel
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <span>Saving...</span>
                                        }
                                        else
                                        {
                                            <i class="bi bi-save me-2"></i>
                                            <span>Save Changes</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">Product Image</h5>
                        </div>
                        <div class="card-body text-center">
                            @if (imageDataUrl != null)
                            {
                                <div class="image-preview-container mb-3">
                                    <img src="@imageDataUrl" class="img-fluid product-image-preview" alt="New product image" />
                                    <div class="image-preview-label">New Image</div>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <div class="image-preview-container @(imageDataUrl != null ? "faded" : "")">
                                    <img src="@product.ImageUrl" class="img-fluid product-image-preview" alt="Current product image" />
                                    <div class="image-preview-label">Current Image</div>
                                </div>
                            }
                            else if (imageDataUrl == null)
                            {
                                <div class="no-image-placeholder">
                                    <i class="bi bi-image text-muted"></i>
                                    <p class="text-muted">No image available</p>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="card mt-3">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Product Details</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-2">
                                <strong>Status:</strong> <span class="@(product.Status == "InStock" ? "text-success" : "text-danger")">@product.Status</span>
                            </div>
                            <div class="mb-2">
                                <strong>Category:</strong> @product.CategoryName
                            </div>
                            <div>
                                <strong>Price:</strong> @string.Format(vndCulture, "{0:N0} VNĐ", product.PriceOfBaseVariant)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Toast notifications -->
    @if (showToast)
    {
        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div class="toast show toast-custom @(isToastVisible ? "toast-visible" : "toast-hidden")" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header @toastHeaderClass">
                    <i class="bi @toastIcon me-2"></i>
                    <strong class="me-auto">@toastTitle</strong>
                    <small>just now</small>
                    <button type="button" class="btn-close" @onclick="CloseToast"></button>
                </div>
                <div class="toast-body">
                    @toastMessage
                </div>
            </div>
        </div>
    }
</PageRedirector>

<style>
    .page-container {
        padding: 1.5rem;
    }

    .page-title {
        font-size: 1.75rem;
        font-weight: 600;
        margin-bottom: 0;
        color: #333;
    }

    .card {
        border-radius: 0.5rem;
        border: 1px solid rgba(0,0,0,0.08);
        box-shadow: 0 4px 6px rgba(0,0,0,0.02);
        margin-bottom: 1.5rem;
    }

    .color-preview {
        width: 24px;
        height: 24px;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .toast-container {
        z-index: 1050;
    }
    
    .bg-success-light {
        background-color: rgba(25, 135, 84, 0.2);
        color: #198754;
    }
    
    .bg-danger-light {
        background-color: rgba(220, 53, 69, 0.2);
        color: #dc3545;
    }
    
    .toast-custom {
        box-shadow: 0 5px 15px rgba(0,0,0,0.15);
        border: none;
        border-radius: 10px;
        overflow: hidden;
        min-width: 300px;
        transition: transform 0.3s ease-out, opacity 0.3s ease-out;
    }
    
    .toast-hidden {
        transform: translateX(100%);
        opacity: 0;
    }
    
    .toast-visible {
        transform: translateX(0);
        opacity: 1;
    }
    
    .toast-header {
        border-bottom: none;
        padding: 0.75rem 1rem;
    }
    
    .toast-body {
        padding: 0.75rem 1rem 1rem;
        font-size: 0.95rem;
    }

    .product-image-preview {
        max-height: 300px;
        max-width: 100%;
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .image-preview-container {
        position: relative;
        margin-bottom: 15px;
        transition: opacity 0.3s ease;
    }

    .image-preview-label {
        position: absolute;
        bottom: 10px;
        right: 10px;
        background-color: rgba(0,0,0,0.6);
        color: white;
        padding: 3px 8px;
        border-radius: 4px;
        font-size: 12px;
    }

    .faded {
        opacity: 0.5;
    }

    .no-image-placeholder {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 200px;
        background-color: #f8f9fa;
        border-radius: 8px;
        border: 1px dashed #dee2e6;
    }

    .no-image-placeholder i {
        font-size: 3rem;
        margin-bottom: 10px;
    }
</style>

@code {
    [Parameter]
    public string ProductId { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }
    
    [Inject]
    private HttpClient HttpClient { get; set; }
    
    private ProductDto product;
    private EditProductDto editProductDto = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private List<CategoryInfoDto> categories = new();
    private IBrowserFile selectedFile;
    private string imageDataUrl;
    
    // Toast notification properties
    private bool showToast = false;
    private bool isToastVisible = false;
    private string toastTitle = "";
    private string toastMessage = "";
    private string toastHeaderClass = "";
    private string toastIcon = "";
    private System.Threading.Timer toastTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await LoadProductAsync();
    }
    
    private async Task LoadCategoriesAsync()
    {
        try
        {
            categories = await HttpClient.GetFromJsonAsync<List<CategoryInfoDto>>("https://localhost:7222/api/categories/info");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            // If we fail to load categories, we'll use the hardcoded fallback values in the UI
        }
    }
    
    private async Task LoadProductAsync()
    {
        isLoading = true;
        
        try
        {
            product = await HttpClient.GetFromJsonAsync<ProductDto>($"https://localhost:7222/api/products/{ProductId}");
            
            if (product != null)
            {
                // Find the category ID that matches the product's category name
                string categoryId = categories.FirstOrDefault(c => c.CategoryName == product.CategoryName)?.CategoryId ?? "";
                
                // Initialize the edit DTO with current product values
                editProductDto = new EditProductDto
                {
                    ProductName = product.ProductName,
                    CategoryId = categoryId,
                    Description = product.Description,
                    ProductPrice = product.PriceOfBaseVariant,
                    ColorCode = product.Variants?.FirstOrDefault(v => v.IsBaseVariant)?.ColorCode ?? "#000000"
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading product: {ex.Message}");
            ShowErrorToast("Error", "Failed to load product data. Please try again.");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void GoBackToProducts()
    {
        NavigationManager.NavigateTo("/products");
    }
    
    private async Task HandleSubmit()
    {
        isSaving = true;
        
        try
        {
            // Create a new multipart form content
            var content = new MultipartFormDataContent();
            
            // Add text fields
            content.Add(new StringContent(editProductDto.ProductName), "productName");
            content.Add(new StringContent(editProductDto.CategoryId), "categoryId");
            content.Add(new StringContent(editProductDto.ColorCode), "colorCode");
            content.Add(new StringContent(editProductDto.Description), "description");
            content.Add(new StringContent(editProductDto.ProductPrice.ToString(CultureInfo.InvariantCulture)), "productPrice");
            
            // Add file if selected
            if (selectedFile != null)
            {
                var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024)); // 5MB max
                content.Add(fileContent, "productImage", selectedFile.Name);
            }
            
            // Send PUT request to update the product
            var response = await HttpClient.PutAsync($"https://localhost:7222/api/products/{ProductId}", content);
            
            if (response.IsSuccessStatusCode)
            {
                ShowSuccessToast("Success", "Product updated successfully.");
                
                // Redirect after a brief delay
                await Task.Delay(1500);
                NavigationManager.NavigateTo($"/products/{ProductId}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                ShowErrorToast("Error", $"Failed to update product: {error}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast("Error", $"An error occurred: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }
    
    private async Task OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        
        // Generate a preview of the selected image
        if (selectedFile != null)
        {
            var format = "image/jpeg";
            var resizedImage = await selectedFile.RequestImageFileAsync(format, 500, 500);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        }
        else
        {
            imageDataUrl = null;
        }
    }

    private async Task ShowWithAnimation()
    {
        // First set the initial state (hidden)
        toastTimer?.Dispose();
        showToast = true;
        isToastVisible = false;
        await InvokeAsync(StateHasChanged);
        
        // Short delay to ensure the DOM is updated and the transition will work
        await Task.Delay(50);
        
        // Now show with animation
        isToastVisible = true;
        await InvokeAsync(StateHasChanged);
    }
    
    private void ShowSuccessToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = "bg-success-light";
        toastIcon = "bi-check-circle";
        
        // Show toast with animation
        _ = ShowWithAnimation();
        
        // Auto-hide toast after 5 seconds
        SetupToastAutoHide();
    }
    
    private void ShowErrorToast(string title, string message)
    {
        toastTitle = title;
        toastMessage = message;
        toastHeaderClass = "bg-danger-light";
        toastIcon = "bi-exclamation-circle";
        
        // Show toast with animation
        _ = ShowWithAnimation();
        
        // Auto-hide toast after 5 seconds
        SetupToastAutoHide();
    }
    
    private async Task CloseToast()
    {
        // Animate out
        isToastVisible = false;
        await InvokeAsync(StateHasChanged);
        
        // Wait for animation to complete
        await Task.Delay(300);
        
        // Then hide the toast
        showToast = false;
        toastTimer?.Dispose();
        toastTimer = null;
        await InvokeAsync(StateHasChanged);
    }
    
    private void SetupToastAutoHide()
    {
        // Dispose of existing timer if there is one
        toastTimer?.Dispose();
        
        // Create a new timer that will hide the toast after 5 seconds
        toastTimer = new System.Threading.Timer(async _ => 
        {
            await CloseToast();
        }, null, 5000, System.Threading.Timeout.Infinite);
    }
    
    // Simplified Edit DTO for the new requirements
    public class EditProductDto
    {
        public string ProductName { get; set; }
        public string CategoryId { get; set; }
        public string Description { get; set; }
        public decimal ProductPrice { get; set; }
        public string ColorCode { get; set; }
    }
    
    // Category model
    public class CategoryInfoDto
    {
        public string CategoryId { get; set; }
        public string CategoryName { get; set; }
    }
    
    // Response model class
    public class ProductDto
    {
        public string ProductId { get; set; }
        public string BaseVariantId { get; set; }
        public string ProductName { get; set; }
        public decimal PriceOfBaseVariant { get; set; }
        public string ImageUrl { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public string CategoryName { get; set; }
        public List<ProductVariantDto> Variants { get; set; } = new();
    }
    
    public class ProductVariantDto
    {
        public string ProductVariantId { get; set; }
        public string ProductId { get; set; }
        public string VariantName { get; set; }
        public string ColorCode { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string ImageUrl { get; set; }
        public bool IsBaseVariant { get; set; }
    }
} 